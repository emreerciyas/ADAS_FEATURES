
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800100  000018da  0000196e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018da  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bf  00800282  00800282  00001af0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00001b48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000eab0  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b29  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030fb  00000000  00000000  000135c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c80  00000000  00000000  000166c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030d7  00000000  00000000  00017344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005124  00000000  00000000  0001a41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  0001f53f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_11>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_18>
      4c:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__vector_19>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	5c 05       	cpc	r21, r12

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	12 e0       	ldi	r17, 0x02	; 2
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ea ed       	ldi	r30, 0xDA	; 218
      ce:	f8 e1       	ldi	r31, 0x18	; 24
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a2 38       	cpi	r26, 0x82	; 130
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	24 e0       	ldi	r18, 0x04	; 4
      de:	a2 e8       	ldi	r26, 0x82	; 130
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a1 34       	cpi	r26, 0x41	; 65
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
     106:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_default>
	...

00000110 <osEE_hal_save_ctx_and_restore_ctx>:
     110:	2f 92       	push	r2
     112:	3f 92       	push	r3
     114:	4f 92       	push	r4
     116:	5f 92       	push	r5
     118:	6f 92       	push	r6
     11a:	7f 92       	push	r7
     11c:	8f 92       	push	r8
     11e:	9f 92       	push	r9
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	e4 2f       	mov	r30, r20
     136:	f5 2f       	mov	r31, r21
     138:	41 90       	ld	r4, Z+
     13a:	50 80       	ld	r5, Z
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	e4 2f       	mov	r30, r20
     142:	f5 2f       	mov	r31, r21
     144:	4d b6       	in	r4, 0x3d	; 61
     146:	5e b6       	in	r5, 0x3e	; 62
     148:	41 92       	st	Z+, r4
     14a:	50 82       	st	Z, r5
     14c:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>

00000150 <osEE_hal_restore_ctx>:
     150:	e6 2f       	mov	r30, r22
     152:	f7 2f       	mov	r31, r23
     154:	41 90       	ld	r4, Z+
     156:	50 80       	ld	r5, Z
     158:	4d be       	out	0x3d, r4	; 61
     15a:	5e be       	out	0x3e, r5	; 62
     15c:	5f 90       	pop	r5
     15e:	4f 90       	pop	r4
     160:	e6 2f       	mov	r30, r22
     162:	f7 2f       	mov	r31, r23
     164:	41 92       	st	Z+, r4
     166:	50 82       	st	Z, r5
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	6f 90       	pop	r6
     184:	5f 90       	pop	r5
     186:	4f 90       	pop	r4
     188:	3f 90       	pop	r3
     18a:	2f 90       	pop	r2
     18c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <osEE_scheduler_task_wrapper_restore>

00000190 <osEE_hal_ready2stacked>:
     190:	e6 2f       	mov	r30, r22
     192:	f7 2f       	mov	r31, r23
     194:	41 91       	ld	r20, Z+
     196:	50 81       	ld	r21, Z
     198:	4d bf       	out	0x3d, r20	; 61
     19a:	5e bf       	out	0x3e, r21	; 62
     19c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <osEE_scheduler_task_wrapper_run>

000001a0 <osEE_hal_save_ctx_and_ready2stacked>:
     1a0:	2f 92       	push	r2
     1a2:	3f 92       	push	r3
     1a4:	4f 92       	push	r4
     1a6:	5f 92       	push	r5
     1a8:	6f 92       	push	r6
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	e4 2f       	mov	r30, r20
     1c6:	f5 2f       	mov	r31, r21
     1c8:	41 90       	ld	r4, Z+
     1ca:	50 80       	ld	r5, Z
     1cc:	4f 92       	push	r4
     1ce:	5f 92       	push	r5
     1d0:	e4 2f       	mov	r30, r20
     1d2:	f5 2f       	mov	r31, r21
     1d4:	4d b6       	in	r4, 0x3d	; 61
     1d6:	5e b6       	in	r5, 0x3e	; 62
     1d8:	41 92       	st	Z+, r4
     1da:	50 82       	st	Z, r5
     1dc:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000001e0 <osEE_hal_terminate_ctx>:
     1e0:	e8 2f       	mov	r30, r24
     1e2:	f9 2f       	mov	r31, r25
     1e4:	41 91       	ld	r20, Z+
     1e6:	50 81       	ld	r21, Z
     1e8:	4d bf       	out	0x3d, r20	; 61
     1ea:	5e bf       	out	0x3e, r21	; 62
     1ec:	e6 2f       	mov	r30, r22
     1ee:	f7 2f       	mov	r31, r23
     1f0:	09 94       	ijmp
	...

000001f4 <Calc_Relative_Speed>:
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	6b 01       	movw	r12, r22
     1fe:	7c 01       	movw	r14, r24
     200:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     204:	81 11       	cpse	r24, r1
     206:	04 c0       	rjmp	.+8      	; 0x210 <Calc_Relative_Speed+0x1c>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
     20e:	20 c0       	rjmp	.+64     	; 0x250 <Calc_Relative_Speed+0x5c>
     210:	a7 01       	movw	r20, r14
     212:	96 01       	movw	r18, r12
     214:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <Relative_Distance_Prev>
     218:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <Relative_Distance_Prev+0x1>
     21c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <Relative_Distance_Prev+0x2>
     220:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <Relative_Distance_Prev+0x3>
     224:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__subsf3>
     228:	2d ec       	ldi	r18, 0xCD	; 205
     22a:	3c ec       	ldi	r19, 0xCC	; 204
     22c:	4c ec       	ldi	r20, 0xCC	; 204
     22e:	5d e3       	ldi	r21, 0x3D	; 61
     230:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__divsf3>
     234:	26 e6       	ldi	r18, 0x66	; 102
     236:	36 e6       	ldi	r19, 0x66	; 102
     238:	46 e6       	ldi	r20, 0x66	; 102
     23a:	50 e4       	ldi	r21, 0x40	; 64
     23c:	0e 94 ae 0b 	call	0x175c	; 0x175c <__mulsf3>
     240:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <Relative_Speed>
     244:	70 93 84 02 	sts	0x0284, r23	; 0x800284 <Relative_Speed+0x1>
     248:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <Relative_Speed+0x2>
     24c:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <Relative_Speed+0x3>
     250:	c0 92 87 02 	sts	0x0287, r12	; 0x800287 <Relative_Distance_Prev>
     254:	d0 92 88 02 	sts	0x0288, r13	; 0x800288 <Relative_Distance_Prev+0x1>
     258:	e0 92 89 02 	sts	0x0289, r14	; 0x800289 <Relative_Distance_Prev+0x2>
     25c:	f0 92 8a 02 	sts	0x028A, r15	; 0x80028a <Relative_Distance_Prev+0x3>
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	df 90       	pop	r13
     266:	cf 90       	pop	r12
     268:	08 95       	ret

0000026a <StartupHook>:
     26a:	60 e4       	ldi	r22, 0x40	; 64
     26c:	72 e4       	ldi	r23, 0x42	; 66
     26e:	8f e0       	ldi	r24, 0x0F	; 15
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <OsEE_atmega_startTimer1>

00000276 <clock_handler>:
     276:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <isr2_armed>
     27a:	81 11       	cpse	r24, r1
     27c:	15 c0       	rjmp	.+42     	; 0x2a8 <clock_handler+0x32>
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <led_val>
     284:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <led_val+0x1>
     288:	89 2b       	or	r24, r25
     28a:	09 f0       	breq	.+2      	; 0x28e <clock_handler+0x18>
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	86 2f       	mov	r24, r22
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <led_val+0x1>
     296:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <led_val>
     29a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <led>
     29e:	0e 94 90 03 	call	0x720	; 0x720 <digitalWrite>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <ActivateTask>
     2a8:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <isr2_armed>
     2ac:	08 95       	ret

000002ae <setup>:
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <led>
     2b4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <pinMode>
     2b8:	26 e0       	ldi	r18, 0x06	; 6
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	52 ec       	ldi	r21, 0xC2	; 194
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	83 ea       	ldi	r24, 0xA3	; 163
     2c4:	93 e0       	ldi	r25, 0x03	; 3
     2c6:	0c 94 95 04 	jmp	0x92a	; 0x92a <_ZN14HardwareSerial5beginEmh>

000002ca <main>:
     2ca:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <init>
     2ce:	0e 94 57 01 	call	0x2ae	; 0x2ae <setup>
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 32 06 	call	0xc64	; 0xc64 <StartOS>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	08 95       	ret

000002de <_Z12serial_printPKc>:
     2de:	f8 94       	cli
     2e0:	fc 01       	movw	r30, r24
     2e2:	01 90       	ld	r0, Z+
     2e4:	00 20       	and	r0, r0
     2e6:	e9 f7       	brne	.-6      	; 0x2e2 <_Z12serial_printPKc+0x4>
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	af 01       	movw	r20, r30
     2ec:	48 1b       	sub	r20, r24
     2ee:	59 0b       	sbc	r21, r25
     2f0:	bc 01       	movw	r22, r24
     2f2:	83 ea       	ldi	r24, 0xA3	; 163
     2f4:	93 e0       	ldi	r25, 0x03	; 3
     2f6:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN5Print5writeEPKhj>
     2fa:	8d ef       	ldi	r24, 0xFD	; 253
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	89 2b       	or	r24, r25
     300:	11 f0       	breq	.+4      	; 0x306 <_Z12serial_printPKc+0x28>
     302:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_Z14serialEventRunv>
     306:	78 94       	sei
     308:	08 95       	ret

0000030a <idle_hook>:
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	00 d0       	rcall	.+0      	; 0x314 <idle_hook+0xa>
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	8d b7       	in	r24, 0x3d	; 61
     31a:	9e b7       	in	r25, 0x3e	; 62
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <main_sp>
     324:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <main_sp+0x1>
     328:	89 2b       	or	r24, r25
     32a:	39 f4       	brne	.+14     	; 0x33a <idle_hook+0x30>
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <main_sp+0x1>
     334:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <main_sp>
     338:	1b c0       	rjmp	.+54     	; 0x370 <idle_hook+0x66>
     33a:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <main_sp>
     33e:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <main_sp+0x1>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	28 17       	cp	r18, r24
     348:	39 07       	cpc	r19, r25
     34a:	91 f0       	breq	.+36     	; 0x370 <idle_hook+0x66>
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <led>
     352:	0e 94 90 03 	call	0x720	; 0x720 <digitalWrite>
     356:	f8 94       	cli
     358:	8e e8       	ldi	r24, 0x8E	; 142
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z12serial_printPKc>
     360:	0d ef       	ldi	r16, 0xFD	; 253
     362:	13 e0       	ldi	r17, 0x03	; 3
     364:	01 15       	cp	r16, r1
     366:	11 05       	cpc	r17, r1
     368:	e9 f3       	breq	.-6      	; 0x364 <idle_hook+0x5a>
     36a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_Z14serialEventRunv>
     36e:	fa cf       	rjmp	.-12     	; 0x364 <idle_hook+0x5a>
     370:	f8 94       	cli
     372:	8d ef       	ldi	r24, 0xFD	; 253
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	89 2b       	or	r24, r25
     378:	11 f0       	breq	.+4      	; 0x37e <idle_hook+0x74>
     37a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_Z14serialEventRunv>
     37e:	78 94       	sei
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <FuncTask1>:
     38e:	cf 93       	push	r28
     390:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <task1_fired>
     394:	8f 5f       	subi	r24, 0xFF	; 255
     396:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <task1_fired>
     39a:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <_ZZ9FuncTask1E17Relative_Distance>
     39e:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <_ZZ9FuncTask1E17Relative_Distance+0x1>
     3a2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_ZZ9FuncTask1E17Relative_Distance+0x2>
     3a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_ZZ9FuncTask1E17Relative_Distance+0x3>
     3aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Calc_Relative_Speed>
     3ae:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
     3b2:	6c 2f       	mov	r22, r28
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
     3be:	2d ec       	ldi	r18, 0xCD	; 205
     3c0:	3c ec       	ldi	r19, 0xCC	; 204
     3c2:	4c ec       	ldi	r20, 0xCC	; 204
     3c4:	5d e3       	ldi	r21, 0x3D	; 61
     3c6:	0e 94 ae 0b 	call	0x175c	; 0x175c <__mulsf3>
     3ca:	26 e6       	ldi	r18, 0x66	; 102
     3cc:	36 e6       	ldi	r19, 0x66	; 102
     3ce:	46 e6       	ldi	r20, 0x66	; 102
     3d0:	50 e4       	ldi	r21, 0x40	; 64
     3d2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__divsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <_ZZ9FuncTask1E17Relative_Distance>
     3de:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <_ZZ9FuncTask1E17Relative_Distance+0x1>
     3e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_ZZ9FuncTask1E17Relative_Distance+0x2>
     3e6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_ZZ9FuncTask1E17Relative_Distance+0x3>
     3ea:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__subsf3>
     3ee:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_ZZ9FuncTask1E17Relative_Distance>
     3f2:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_ZZ9FuncTask1E17Relative_Distance+0x1>
     3f6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZZ9FuncTask1E17Relative_Distance+0x2>
     3fa:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_ZZ9FuncTask1E17Relative_Distance+0x3>
     3fe:	cf 5f       	subi	r28, 0xFF	; 255
     400:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
     404:	8a ea       	ldi	r24, 0xAA	; 170
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z12serial_printPKc>
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <ActivateTask>
     412:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <task1_ended>
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <task1_ended>
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <FuncTask2>:
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	2a 97       	sbiw	r28, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	8e eb       	ldi	r24, 0xBE	; 190
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z12serial_printPKc>
     448:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <task2_fired>
     44c:	8f 5f       	subi	r24, 0xFF	; 255
     44e:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <task2_fired>
     452:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <Relative_Speed>
     456:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <Relative_Speed+0x1>
     45a:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Relative_Speed+0x2>
     45e:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <Relative_Speed+0x3>
     462:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fixsfsi>
     466:	8b 01       	movw	r16, r22
     468:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <_ZZ9FuncTask2E6result+0x1>
     46c:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <_ZZ9FuncTask2E6result>
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	ea e0       	ldi	r30, 0x0A	; 10
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	61 15       	cp	r22, r1
     47a:	71 05       	cpc	r23, r1
     47c:	39 f0       	breq	.+14     	; 0x48c <FuncTask2+0x6c>
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	cb 01       	movw	r24, r22
     484:	bf 01       	movw	r22, r30
     486:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divmodhi4>
     48a:	f6 cf       	rjmp	.-20     	; 0x478 <FuncTask2+0x58>
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	7c 01       	movw	r14, r24
     492:	fc 01       	movw	r30, r24
     494:	e2 0f       	add	r30, r18
     496:	f3 1f       	adc	r31, r19
     498:	8a e0       	ldi	r24, 0x0A	; 10
     49a:	c8 2e       	mov	r12, r24
     49c:	d1 2c       	mov	r13, r1
     49e:	ee 15       	cp	r30, r14
     4a0:	ff 05       	cpc	r31, r15
     4a2:	49 f0       	breq	.+18     	; 0x4b6 <FuncTask2+0x96>
     4a4:	c8 01       	movw	r24, r16
     4a6:	b6 01       	movw	r22, r12
     4a8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divmodhi4>
     4ac:	8b 01       	movw	r16, r22
     4ae:	90 e3       	ldi	r25, 0x30	; 48
     4b0:	98 0f       	add	r25, r24
     4b2:	92 93       	st	-Z, r25
     4b4:	f4 cf       	rjmp	.-24     	; 0x49e <FuncTask2+0x7e>
     4b6:	df 01       	movw	r26, r30
     4b8:	a2 0f       	add	r26, r18
     4ba:	b3 1f       	adc	r27, r19
     4bc:	1c 92       	st	X, r1
     4be:	bf 01       	movw	r22, r30
     4c0:	83 ea       	ldi	r24, 0xA3	; 163
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN5Print5printEPKc>
     4c8:	67 ea       	ldi	r22, 0xA7	; 167
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	83 ea       	ldi	r24, 0xA3	; 163
     4ce:	93 e0       	ldi	r25, 0x03	; 3
     4d0:	0e 94 c9 05 	call	0xb92	; 0xb92 <_ZN5Print5printEPKc>
     4d4:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <task2_ended>
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <task2_ended>
     4de:	2a 96       	adiw	r28, 0x0a	; 10
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <FuncTask3>:
     4fc:	86 ec       	ldi	r24, 0xC6	; 198
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z12serial_printPKc>
     504:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <task3_fired>
     508:	8f 5f       	subi	r24, 0xFF	; 255
     50a:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <task3_fired>
     50e:	84 e0       	ldi	r24, 0x04	; 4
     510:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <ActivateTask>
     514:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <task3_ended>
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <task3_ended>
     51e:	08 95       	ret

00000520 <FuncTask4>:
     520:	8e ec       	ldi	r24, 0xCE	; 206
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z12serial_printPKc>
     528:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <task4_fired>
     52c:	8f 5f       	subi	r24, 0xFF	; 255
     52e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <task4_fired>
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <ActivateTask>

00000538 <FuncTask5>:
     538:	86 ed       	ldi	r24, 0xD6	; 214
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z12serial_printPKc>
     540:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <task5_fired>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <task5_fired>
     54a:	08 95       	ret

0000054c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	2f 93       	push	r18
     558:	3f 93       	push	r19
     55a:	8f 93       	push	r24
     55c:	9f 93       	push	r25
     55e:	af 93       	push	r26
     560:	bf 93       	push	r27
     562:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <timer0_millis>
     566:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <timer0_millis+0x1>
     56a:	a0 91 9d 03 	lds	r26, 0x039D	; 0x80039d <timer0_millis+0x2>
     56e:	b0 91 9e 03 	lds	r27, 0x039E	; 0x80039e <timer0_millis+0x3>
     572:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <timer0_fract>
     576:	23 e0       	ldi	r18, 0x03	; 3
     578:	23 0f       	add	r18, r19
     57a:	2d 37       	cpi	r18, 0x7D	; 125
     57c:	20 f4       	brcc	.+8      	; 0x586 <__vector_16+0x3a>
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	a1 1d       	adc	r26, r1
     582:	b1 1d       	adc	r27, r1
     584:	05 c0       	rjmp	.+10     	; 0x590 <__vector_16+0x44>
     586:	26 e8       	ldi	r18, 0x86	; 134
     588:	23 0f       	add	r18, r19
     58a:	02 96       	adiw	r24, 0x02	; 2
     58c:	a1 1d       	adc	r26, r1
     58e:	b1 1d       	adc	r27, r1
     590:	20 93 9a 03 	sts	0x039A, r18	; 0x80039a <timer0_fract>
     594:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <timer0_millis>
     598:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <timer0_millis+0x1>
     59c:	a0 93 9d 03 	sts	0x039D, r26	; 0x80039d <timer0_millis+0x2>
     5a0:	b0 93 9e 03 	sts	0x039E, r27	; 0x80039e <timer0_millis+0x3>
     5a4:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <timer0_overflow_count>
     5a8:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <timer0_overflow_count+0x1>
     5ac:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <timer0_overflow_count+0x2>
     5b0:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <timer0_overflow_count+0x3>
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	a1 1d       	adc	r26, r1
     5b8:	b1 1d       	adc	r27, r1
     5ba:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <timer0_overflow_count>
     5be:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <timer0_overflow_count+0x1>
     5c2:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <timer0_overflow_count+0x2>
     5c6:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <timer0_overflow_count+0x3>
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	3f 91       	pop	r19
     5d4:	2f 91       	pop	r18
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     5e0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     5e2:	84 b5       	in	r24, 0x24	; 36
     5e4:	82 60       	ori	r24, 0x02	; 2
     5e6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     5e8:	84 b5       	in	r24, 0x24	; 36
     5ea:	81 60       	ori	r24, 0x01	; 1
     5ec:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     5ee:	85 b5       	in	r24, 0x25	; 37
     5f0:	82 60       	ori	r24, 0x02	; 2
     5f2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     5f4:	85 b5       	in	r24, 0x25	; 37
     5f6:	81 60       	ori	r24, 0x01	; 1
     5f8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     5fa:	ee e6       	ldi	r30, 0x6E	; 110
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	81 60       	ori	r24, 0x01	; 1
     602:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     604:	e1 e8       	ldi	r30, 0x81	; 129
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     60a:	80 81       	ld	r24, Z
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     610:	80 81       	ld	r24, Z
     612:	81 60       	ori	r24, 0x01	; 1
     614:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     616:	e0 e8       	ldi	r30, 0x80	; 128
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	81 60       	ori	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     620:	e1 eb       	ldi	r30, 0xB1	; 177
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	84 60       	ori	r24, 0x04	; 4
     628:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     62a:	e0 eb       	ldi	r30, 0xB0	; 176
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	81 60       	ori	r24, 0x01	; 1
     632:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     634:	ea e7       	ldi	r30, 0x7A	; 122
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	84 60       	ori	r24, 0x04	; 4
     63c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     63e:	80 81       	ld	r24, Z
     640:	82 60       	ori	r24, 0x02	; 2
     642:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     644:	80 81       	ld	r24, Z
     646:	81 60       	ori	r24, 0x01	; 1
     648:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     64a:	80 81       	ld	r24, Z
     64c:	80 68       	ori	r24, 0x80	; 128
     64e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     650:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     654:	08 95       	ret

00000656 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     656:	83 30       	cpi	r24, 0x03	; 3
     658:	81 f0       	breq	.+32     	; 0x67a <turnOffPWM+0x24>
     65a:	28 f4       	brcc	.+10     	; 0x666 <turnOffPWM+0x10>
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	99 f0       	breq	.+38     	; 0x686 <turnOffPWM+0x30>
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	a1 f0       	breq	.+40     	; 0x68c <turnOffPWM+0x36>
     664:	08 95       	ret
     666:	87 30       	cpi	r24, 0x07	; 7
     668:	a9 f0       	breq	.+42     	; 0x694 <turnOffPWM+0x3e>
     66a:	88 30       	cpi	r24, 0x08	; 8
     66c:	b9 f0       	breq	.+46     	; 0x69c <turnOffPWM+0x46>
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	d1 f4       	brne	.+52     	; 0x6a6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     672:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     676:	8f 7d       	andi	r24, 0xDF	; 223
     678:	03 c0       	rjmp	.+6      	; 0x680 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     67a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     67e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     680:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     684:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     686:	84 b5       	in	r24, 0x24	; 36
     688:	8f 77       	andi	r24, 0x7F	; 127
     68a:	02 c0       	rjmp	.+4      	; 0x690 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     68c:	84 b5       	in	r24, 0x24	; 36
     68e:	8f 7d       	andi	r24, 0xDF	; 223
     690:	84 bd       	out	0x24, r24	; 36
     692:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     694:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     698:	8f 77       	andi	r24, 0x7F	; 127
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     69c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     6a0:	8f 7d       	andi	r24, 0xDF	; 223
     6a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     6a6:	08 95       	ret

000006a8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	fc 01       	movw	r30, r24
     6b0:	e4 58       	subi	r30, 0x84	; 132
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     6b6:	fc 01       	movw	r30, r24
     6b8:	e0 57       	subi	r30, 0x70	; 112
     6ba:	ff 4f       	sbci	r31, 0xFF	; 255
     6bc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     6be:	88 23       	and	r24, r24
     6c0:	61 f1       	breq	.+88     	; 0x71a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	fc 01       	movw	r30, r24
     6ca:	e2 55       	subi	r30, 0x52	; 82
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	c5 91       	lpm	r28, Z+
     6d0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     6d2:	fc 01       	movw	r30, r24
     6d4:	ec 55       	subi	r30, 0x5C	; 92
     6d6:	ff 4f       	sbci	r31, 0xFF	; 255
     6d8:	a5 91       	lpm	r26, Z+
     6da:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     6dc:	61 11       	cpse	r22, r1
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     6e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     6e2:	f8 94       	cli
		*reg &= ~bit;
     6e4:	88 81       	ld	r24, Y
     6e6:	20 95       	com	r18
     6e8:	82 23       	and	r24, r18
     6ea:	88 83       	st	Y, r24
		*out &= ~bit;
     6ec:	ec 91       	ld	r30, X
     6ee:	2e 23       	and	r18, r30
     6f0:	0b c0       	rjmp	.+22     	; 0x708 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     6f2:	62 30       	cpi	r22, 0x02	; 2
     6f4:	61 f4       	brne	.+24     	; 0x70e <pinMode+0x66>
		uint8_t oldSREG = SREG;
     6f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     6f8:	f8 94       	cli
		*reg &= ~bit;
     6fa:	38 81       	ld	r19, Y
     6fc:	82 2f       	mov	r24, r18
     6fe:	80 95       	com	r24
     700:	83 23       	and	r24, r19
     702:	88 83       	st	Y, r24
		*out |= bit;
     704:	ec 91       	ld	r30, X
     706:	2e 2b       	or	r18, r30
     708:	2c 93       	st	X, r18
		SREG = oldSREG;
     70a:	9f bf       	out	0x3f, r25	; 63
     70c:	06 c0       	rjmp	.+12     	; 0x71a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     70e:	8f b7       	in	r24, 0x3f	; 63
                cli();
     710:	f8 94       	cli
		*reg |= bit;
     712:	e8 81       	ld	r30, Y
     714:	2e 2b       	or	r18, r30
     716:	28 83       	st	Y, r18
		SREG = oldSREG;
     718:	8f bf       	out	0x3f, r24	; 63
	}
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     726:	28 2f       	mov	r18, r24
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	f9 01       	movw	r30, r18
     72c:	e8 59       	subi	r30, 0x98	; 152
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     732:	f9 01       	movw	r30, r18
     734:	e4 58       	subi	r30, 0x84	; 132
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     73a:	f9 01       	movw	r30, r18
     73c:	e0 57       	subi	r30, 0x70	; 112
     73e:	ff 4f       	sbci	r31, 0xFF	; 255
     740:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     742:	cc 23       	and	r28, r28
     744:	c9 f0       	breq	.+50     	; 0x778 <digitalWrite+0x58>
     746:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     748:	81 11       	cpse	r24, r1
     74a:	0e 94 2b 03 	call	0x656	; 0x656 <turnOffPWM>

	out = portOutputRegister(port);
     74e:	ec 2f       	mov	r30, r28
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ee 0f       	add	r30, r30
     754:	ff 1f       	adc	r31, r31
     756:	ec 55       	subi	r30, 0x5C	; 92
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	a5 91       	lpm	r26, Z+
     75c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     75e:	8f b7       	in	r24, 0x3f	; 63
	cli();
     760:	f8 94       	cli

	if (val == LOW) {
     762:	11 11       	cpse	r17, r1
     764:	05 c0       	rjmp	.+10     	; 0x770 <digitalWrite+0x50>
		*out &= ~bit;
     766:	9c 91       	ld	r25, X
     768:	ed 2f       	mov	r30, r29
     76a:	e0 95       	com	r30
     76c:	e9 23       	and	r30, r25
     76e:	02 c0       	rjmp	.+4      	; 0x774 <digitalWrite+0x54>
	} else {
		*out |= bit;
     770:	ec 91       	ld	r30, X
     772:	ed 2b       	or	r30, r29
     774:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     776:	8f bf       	out	0x3f, r24	; 63
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	08 95       	ret

00000780 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     780:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     782:	91 8d       	ldd	r25, Z+25	; 0x19
     784:	22 8d       	ldd	r18, Z+26	; 0x1a
     786:	89 2f       	mov	r24, r25
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	80 5c       	subi	r24, 0xC0	; 192
     78c:	9f 4f       	sbci	r25, 0xFF	; 255
     78e:	82 1b       	sub	r24, r18
     790:	91 09       	sbc	r25, r1
}
     792:	8f 73       	andi	r24, 0x3F	; 63
     794:	99 27       	eor	r25, r25
     796:	08 95       	ret

00000798 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     798:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     79a:	91 8d       	ldd	r25, Z+25	; 0x19
     79c:	82 8d       	ldd	r24, Z+26	; 0x1a
     79e:	98 17       	cp	r25, r24
     7a0:	31 f0       	breq	.+12     	; 0x7ae <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     7a2:	82 8d       	ldd	r24, Z+26	; 0x1a
     7a4:	e8 0f       	add	r30, r24
     7a6:	f1 1d       	adc	r31, r1
     7a8:	85 8d       	ldd	r24, Z+29	; 0x1d
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     7b2:	08 95       	ret

000007b4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     7b4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     7b6:	91 8d       	ldd	r25, Z+25	; 0x19
     7b8:	82 8d       	ldd	r24, Z+26	; 0x1a
     7ba:	98 17       	cp	r25, r24
     7bc:	61 f0       	breq	.+24     	; 0x7d6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     7be:	82 8d       	ldd	r24, Z+26	; 0x1a
     7c0:	df 01       	movw	r26, r30
     7c2:	a8 0f       	add	r26, r24
     7c4:	b1 1d       	adc	r27, r1
     7c6:	5d 96       	adiw	r26, 0x1d	; 29
     7c8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     7ca:	92 8d       	ldd	r25, Z+26	; 0x1a
     7cc:	9f 5f       	subi	r25, 0xFF	; 255
     7ce:	9f 73       	andi	r25, 0x3F	; 63
     7d0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     7da:	08 95       	ret

000007dc <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     7dc:	fc 01       	movw	r30, r24
     7de:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     7e0:	44 8d       	ldd	r20, Z+28	; 0x1c
     7e2:	25 2f       	mov	r18, r21
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	84 2f       	mov	r24, r20
     7e8:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     7ea:	82 1b       	sub	r24, r18
     7ec:	93 0b       	sbc	r25, r19
     7ee:	54 17       	cp	r21, r20
     7f0:	10 f0       	brcs	.+4      	; 0x7f6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     7f2:	cf 96       	adiw	r24, 0x3f	; 63
     7f4:	08 95       	ret
  return tail - head - 1;
     7f6:	01 97       	sbiw	r24, 0x01	; 1
}
     7f8:	08 95       	ret

000007fa <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7fa:	82 e5       	ldi	r24, 0x52	; 82
     7fc:	95 e0       	ldi	r25, 0x05	; 5
     7fe:	89 2b       	or	r24, r25
     800:	49 f0       	breq	.+18     	; 0x814 <_Z14serialEventRunv+0x1a>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	89 2b       	or	r24, r25
     808:	29 f0       	breq	.+10     	; 0x814 <_Z14serialEventRunv+0x1a>
     80a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z17Serial0_availablev>
     80e:	81 11       	cpse	r24, r1
     810:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     814:	08 95       	ret

00000816 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     816:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     818:	84 8d       	ldd	r24, Z+28	; 0x1c
     81a:	df 01       	movw	r26, r30
     81c:	a8 0f       	add	r26, r24
     81e:	b1 1d       	adc	r27, r1
     820:	a3 5a       	subi	r26, 0xA3	; 163
     822:	bf 4f       	sbci	r27, 0xFF	; 255
     824:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     826:	84 8d       	ldd	r24, Z+28	; 0x1c
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	8f 73       	andi	r24, 0x3F	; 63
     82e:	99 27       	eor	r25, r25
     830:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     832:	a6 89       	ldd	r26, Z+22	; 0x16
     834:	b7 89       	ldd	r27, Z+23	; 0x17
     836:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     838:	a0 89       	ldd	r26, Z+16	; 0x10
     83a:	b1 89       	ldd	r27, Z+17	; 0x11
     83c:	8c 91       	ld	r24, X
     83e:	80 64       	ori	r24, 0x40	; 64
     840:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     842:	93 8d       	ldd	r25, Z+27	; 0x1b
     844:	84 8d       	ldd	r24, Z+28	; 0x1c
     846:	98 13       	cpse	r25, r24
     848:	06 c0       	rjmp	.+12     	; 0x856 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     84a:	02 88       	ldd	r0, Z+18	; 0x12
     84c:	f3 89       	ldd	r31, Z+19	; 0x13
     84e:	e0 2d       	mov	r30, r0
     850:	80 81       	ld	r24, Z
     852:	8f 7d       	andi	r24, 0xDF	; 223
     854:	80 83       	st	Z, r24
     856:	08 95       	ret

00000858 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     85e:	88 8d       	ldd	r24, Y+24	; 0x18
     860:	88 23       	and	r24, r24
     862:	c9 f0       	breq	.+50     	; 0x896 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     864:	ea 89       	ldd	r30, Y+18	; 0x12
     866:	fb 89       	ldd	r31, Y+19	; 0x13
     868:	80 81       	ld	r24, Z
     86a:	85 fd       	sbrc	r24, 5
     86c:	05 c0       	rjmp	.+10     	; 0x878 <_ZN14HardwareSerial5flushEv+0x20>
     86e:	a8 89       	ldd	r26, Y+16	; 0x10
     870:	b9 89       	ldd	r27, Y+17	; 0x11
     872:	8c 91       	ld	r24, X
     874:	86 fd       	sbrc	r24, 6
     876:	0f c0       	rjmp	.+30     	; 0x896 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	07 fc       	sbrc	r0, 7
     87c:	f5 cf       	rjmp	.-22     	; 0x868 <_ZN14HardwareSerial5flushEv+0x10>
     87e:	80 81       	ld	r24, Z
     880:	85 ff       	sbrs	r24, 5
     882:	f2 cf       	rjmp	.-28     	; 0x868 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     884:	a8 89       	ldd	r26, Y+16	; 0x10
     886:	b9 89       	ldd	r27, Y+17	; 0x11
     888:	8c 91       	ld	r24, X
     88a:	85 ff       	sbrs	r24, 5
     88c:	ed cf       	rjmp	.-38     	; 0x868 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     894:	e7 cf       	rjmp	.-50     	; 0x864 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
  _written = true;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     8ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8b2:	98 13       	cpse	r25, r24
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <_ZN14HardwareSerial5writeEh+0x24>
     8b6:	e8 89       	ldd	r30, Y+16	; 0x10
     8b8:	f9 89       	ldd	r31, Y+17	; 0x11
     8ba:	80 81       	ld	r24, Z
     8bc:	85 fd       	sbrc	r24, 5
     8be:	24 c0       	rjmp	.+72     	; 0x908 <__stack+0x9>
     8c0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     8c2:	0b 8d       	ldd	r16, Y+27	; 0x1b
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	0f 5f       	subi	r16, 0xFF	; 255
     8c8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ca:	0f 73       	andi	r16, 0x3F	; 63
     8cc:	11 27       	eor	r17, r17
     8ce:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     8d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8d2:	e8 12       	cpse	r14, r24
     8d4:	0c c0       	rjmp	.+24     	; 0x8ee <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	07 fc       	sbrc	r0, 7
     8da:	fa cf       	rjmp	.-12     	; 0x8d0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     8dc:	e8 89       	ldd	r30, Y+16	; 0x10
     8de:	f9 89       	ldd	r31, Y+17	; 0x11
     8e0:	80 81       	ld	r24, Z
     8e2:	85 ff       	sbrs	r24, 5
     8e4:	f5 cf       	rjmp	.-22     	; 0x8d0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     8e6:	ce 01       	movw	r24, r28
     8e8:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8ec:	f1 cf       	rjmp	.-30     	; 0x8d0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     8ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8f0:	fe 01       	movw	r30, r28
     8f2:	e8 0f       	add	r30, r24
     8f4:	f1 1d       	adc	r31, r1
     8f6:	e3 5a       	subi	r30, 0xA3	; 163
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     8fc:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     8fe:	ea 89       	ldd	r30, Y+18	; 0x12
     900:	fb 89       	ldd	r31, Y+19	; 0x13
     902:	80 81       	ld	r24, Z
     904:	80 62       	ori	r24, 0x20	; 32
     906:	07 c0       	rjmp	.+14     	; 0x916 <__stack+0x17>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     908:	ee 89       	ldd	r30, Y+22	; 0x16
     90a:	ff 89       	ldd	r31, Y+23	; 0x17
     90c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     90e:	e8 89       	ldd	r30, Y+16	; 0x10
     910:	f9 89       	ldd	r31, Y+17	; 0x11
     912:	80 81       	ld	r24, Z
     914:	80 64       	ori	r24, 0x40	; 64
     916:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	08 95       	ret

0000092a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	6a 01       	movw	r12, r20
     93c:	7b 01       	movw	r14, r22
     93e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     940:	e8 89       	ldd	r30, Y+16	; 0x10
     942:	f9 89       	ldd	r31, Y+17	; 0x11
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     948:	41 15       	cp	r20, r1
     94a:	51 4e       	sbci	r21, 0xE1	; 225
     94c:	61 05       	cpc	r22, r1
     94e:	71 05       	cpc	r23, r1
     950:	b1 f0       	breq	.+44     	; 0x97e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	79 e0       	ldi	r23, 0x09	; 9
     956:	8d e3       	ldi	r24, 0x3D	; 61
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	a7 01       	movw	r20, r14
     95c:	96 01       	movw	r18, r12
     95e:	0e 94 2f 0c 	call	0x185e	; 0x185e <__udivmodsi4>
     962:	da 01       	movw	r26, r20
     964:	c9 01       	movw	r24, r18
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	a1 09       	sbc	r26, r1
     96a:	b1 09       	sbc	r27, r1
     96c:	b6 95       	lsr	r27
     96e:	a7 95       	ror	r26
     970:	97 95       	ror	r25
     972:	87 95       	ror	r24
     974:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     976:	41 15       	cp	r20, r1
     978:	80 e1       	ldi	r24, 0x10	; 16
     97a:	58 07       	cpc	r21, r24
     97c:	a8 f0       	brcs	.+42     	; 0x9a8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     97e:	e8 89       	ldd	r30, Y+16	; 0x10
     980:	f9 89       	ldd	r31, Y+17	; 0x11
     982:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     984:	60 e8       	ldi	r22, 0x80	; 128
     986:	74 e8       	ldi	r23, 0x84	; 132
     988:	8e e1       	ldi	r24, 0x1E	; 30
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a7 01       	movw	r20, r14
     98e:	96 01       	movw	r18, r12
     990:	0e 94 2f 0c 	call	0x185e	; 0x185e <__udivmodsi4>
     994:	ba 01       	movw	r22, r20
     996:	a9 01       	movw	r20, r18
     998:	41 50       	subi	r20, 0x01	; 1
     99a:	51 09       	sbc	r21, r1
     99c:	61 09       	sbc	r22, r1
     99e:	71 09       	sbc	r23, r1
     9a0:	76 95       	lsr	r23
     9a2:	67 95       	ror	r22
     9a4:	57 95       	ror	r21
     9a6:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     9a8:	ec 85       	ldd	r30, Y+12	; 0x0c
     9aa:	fd 85       	ldd	r31, Y+13	; 0x0d
     9ac:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     9ae:	ee 85       	ldd	r30, Y+14	; 0x0e
     9b0:	ff 85       	ldd	r31, Y+15	; 0x0f
     9b2:	40 83       	st	Z, r20

  _written = false;
     9b4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     9b6:	ec 89       	ldd	r30, Y+20	; 0x14
     9b8:	fd 89       	ldd	r31, Y+21	; 0x15
     9ba:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     9bc:	ea 89       	ldd	r30, Y+18	; 0x12
     9be:	fb 89       	ldd	r31, Y+19	; 0x13
     9c0:	80 81       	ld	r24, Z
     9c2:	80 61       	ori	r24, 0x10	; 16
     9c4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     9c6:	ea 89       	ldd	r30, Y+18	; 0x12
     9c8:	fb 89       	ldd	r31, Y+19	; 0x13
     9ca:	80 81       	ld	r24, Z
     9cc:	88 60       	ori	r24, 0x08	; 8
     9ce:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     9d0:	ea 89       	ldd	r30, Y+18	; 0x12
     9d2:	fb 89       	ldd	r31, Y+19	; 0x13
     9d4:	80 81       	ld	r24, Z
     9d6:	80 68       	ori	r24, 0x80	; 128
     9d8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     9da:	ea 89       	ldd	r30, Y+18	; 0x12
     9dc:	fb 89       	ldd	r31, Y+19	; 0x13
     9de:	80 81       	ld	r24, Z
     9e0:	8f 7d       	andi	r24, 0xDF	; 223
     9e2:	80 83       	st	Z, r24
}
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	08 95       	ret

000009f4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     9f4:	1f 92       	push	r1
     9f6:	0f 92       	push	r0
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	0f 92       	push	r0
     9fc:	11 24       	eor	r1, r1
     9fe:	2f 93       	push	r18
     a00:	8f 93       	push	r24
     a02:	9f 93       	push	r25
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     a08:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <Serial+0x10>
     a0c:	f0 91 b4 03 	lds	r31, 0x03B4	; 0x8003b4 <Serial+0x11>
     a10:	80 81       	ld	r24, Z
     a12:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <Serial+0x16>
     a16:	f0 91 ba 03 	lds	r31, 0x03BA	; 0x8003ba <Serial+0x17>
     a1a:	82 fd       	sbrc	r24, 2
     a1c:	12 c0       	rjmp	.+36     	; 0xa42 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     a1e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     a20:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <Serial+0x19>
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     a28:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <Serial+0x1a>
     a2c:	82 17       	cp	r24, r18
     a2e:	51 f0       	breq	.+20     	; 0xa44 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     a30:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <Serial+0x19>
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	ed 55       	subi	r30, 0x5D	; 93
     a38:	fc 4f       	sbci	r31, 0xFC	; 252
     a3a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     a3c:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <Serial+0x19>
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     a42:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	2f 91       	pop	r18
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	2f 93       	push	r18
     a64:	3f 93       	push	r19
     a66:	4f 93       	push	r20
     a68:	5f 93       	push	r21
     a6a:	6f 93       	push	r22
     a6c:	7f 93       	push	r23
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	af 93       	push	r26
     a74:	bf 93       	push	r27
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a7a:	83 ea       	ldi	r24, 0xA3	; 163
     a7c:	93 e0       	ldi	r25, 0x03	; 3
     a7e:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     aa4:	83 ea       	ldi	r24, 0xA3	; 163
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN14HardwareSerial9availableEv>
     aac:	21 e0       	ldi	r18, 0x01	; 1
     aae:	89 2b       	or	r24, r25
     ab0:	09 f4       	brne	.+2      	; 0xab4 <_Z17Serial0_availablev+0x10>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
}
     ab4:	82 2f       	mov	r24, r18
     ab6:	08 95       	ret

00000ab8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ab8:	e3 ea       	ldi	r30, 0xA3	; 163
     aba:	f3 e0       	ldi	r31, 0x03	; 3
     abc:	13 82       	std	Z+3, r1	; 0x03
     abe:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     ac0:	88 ee       	ldi	r24, 0xE8	; 232
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	84 83       	std	Z+4, r24	; 0x04
     aca:	95 83       	std	Z+5, r25	; 0x05
     acc:	a6 83       	std	Z+6, r26	; 0x06
     ace:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ad0:	84 e7       	ldi	r24, 0x74	; 116
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	91 83       	std	Z+1, r25	; 0x01
     ad6:	80 83       	st	Z, r24
     ad8:	85 ec       	ldi	r24, 0xC5	; 197
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	95 87       	std	Z+13, r25	; 0x0d
     ade:	84 87       	std	Z+12, r24	; 0x0c
     ae0:	84 ec       	ldi	r24, 0xC4	; 196
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	97 87       	std	Z+15, r25	; 0x0f
     ae6:	86 87       	std	Z+14, r24	; 0x0e
     ae8:	80 ec       	ldi	r24, 0xC0	; 192
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	91 8b       	std	Z+17, r25	; 0x11
     aee:	80 8b       	std	Z+16, r24	; 0x10
     af0:	81 ec       	ldi	r24, 0xC1	; 193
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	93 8b       	std	Z+19, r25	; 0x13
     af6:	82 8b       	std	Z+18, r24	; 0x12
     af8:	82 ec       	ldi	r24, 0xC2	; 194
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	95 8b       	std	Z+21, r25	; 0x15
     afe:	84 8b       	std	Z+20, r24	; 0x14
     b00:	86 ec       	ldi	r24, 0xC6	; 198
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	97 8b       	std	Z+23, r25	; 0x17
     b06:	86 8b       	std	Z+22, r24	; 0x16
     b08:	11 8e       	std	Z+25, r1	; 0x19
     b0a:	12 8e       	std	Z+26, r1	; 0x1a
     b0c:	13 8e       	std	Z+27, r1	; 0x1b
     b0e:	14 8e       	std	Z+28, r1	; 0x1c
     b10:	08 95       	ret

00000b12 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	6c 01       	movw	r12, r24
     b24:	7a 01       	movw	r14, r20
     b26:	8b 01       	movw	r16, r22
     b28:	c0 e0       	ldi	r28, 0x00	; 0
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
     b2c:	ce 15       	cp	r28, r14
     b2e:	df 05       	cpc	r29, r15
     b30:	89 f0       	breq	.+34     	; 0xb54 <_ZN5Print5writeEPKhj+0x42>
     b32:	d8 01       	movw	r26, r16
     b34:	6d 91       	ld	r22, X+
     b36:	8d 01       	movw	r16, r26
     b38:	d6 01       	movw	r26, r12
     b3a:	ed 91       	ld	r30, X+
     b3c:	fc 91       	ld	r31, X
     b3e:	01 90       	ld	r0, Z+
     b40:	f0 81       	ld	r31, Z
     b42:	e0 2d       	mov	r30, r0
     b44:	c6 01       	movw	r24, r12
     b46:	09 95       	icall
     b48:	89 2b       	or	r24, r25
     b4a:	11 f4       	brne	.+4      	; 0xb50 <_ZN5Print5writeEPKhj+0x3e>
     b4c:	7e 01       	movw	r14, r28
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <_ZN5Print5writeEPKhj+0x42>
     b50:	21 96       	adiw	r28, 0x01	; 1
     b52:	ec cf       	rjmp	.-40     	; 0xb2c <_ZN5Print5writeEPKhj+0x1a>
     b54:	c7 01       	movw	r24, r14
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	08 95       	ret

00000b68 <_ZN5Print5writeEPKc>:
     b68:	61 15       	cp	r22, r1
     b6a:	71 05       	cpc	r23, r1
     b6c:	79 f0       	breq	.+30     	; 0xb8c <_ZN5Print5writeEPKc+0x24>
     b6e:	fb 01       	movw	r30, r22
     b70:	01 90       	ld	r0, Z+
     b72:	00 20       	and	r0, r0
     b74:	e9 f7       	brne	.-6      	; 0xb70 <_ZN5Print5writeEPKc+0x8>
     b76:	31 97       	sbiw	r30, 0x01	; 1
     b78:	af 01       	movw	r20, r30
     b7a:	46 1b       	sub	r20, r22
     b7c:	57 0b       	sbc	r21, r23
     b7e:	dc 01       	movw	r26, r24
     b80:	ed 91       	ld	r30, X+
     b82:	fc 91       	ld	r31, X
     b84:	02 80       	ldd	r0, Z+2	; 0x02
     b86:	f3 81       	ldd	r31, Z+3	; 0x03
     b88:	e0 2d       	mov	r30, r0
     b8a:	09 94       	ijmp
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	08 95       	ret

00000b92 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     b92:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_ZN5Print5writeEPKc>

00000b96 <OsEE_atmega_startTimer1>:
     b96:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b9a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     b9e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     ba2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ba6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     baa:	61 15       	cp	r22, r1
     bac:	20 e1       	ldi	r18, 0x10	; 16
     bae:	72 07       	cpc	r23, r18
     bb0:	81 05       	cpc	r24, r1
     bb2:	91 05       	cpc	r25, r1
     bb4:	48 f4       	brcc	.+18     	; 0xbc8 <OsEE_atmega_startTimer1+0x32>
     bb6:	e4 e0       	ldi	r30, 0x04	; 4
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	ea 95       	dec	r30
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <OsEE_atmega_startTimer1+0x22>
     bc0:	61 50       	subi	r22, 0x01	; 1
     bc2:	71 09       	sbc	r23, r1
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	42 c0       	rjmp	.+132    	; 0xc4c <OsEE_atmega_startTimer1+0xb6>
     bc8:	61 15       	cp	r22, r1
     bca:	20 e8       	ldi	r18, 0x80	; 128
     bcc:	72 07       	cpc	r23, r18
     bce:	81 05       	cpc	r24, r1
     bd0:	91 05       	cpc	r25, r1
     bd2:	30 f4       	brcc	.+12     	; 0xbe0 <OsEE_atmega_startTimer1+0x4a>
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	61 50       	subi	r22, 0x01	; 1
     bda:	71 09       	sbc	r23, r1
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	36 c0       	rjmp	.+108    	; 0xc4c <OsEE_atmega_startTimer1+0xb6>
     be0:	6c 3f       	cpi	r22, 0xFC	; 252
     be2:	2f ef       	ldi	r18, 0xFF	; 255
     be4:	72 07       	cpc	r23, r18
     be6:	23 e0       	ldi	r18, 0x03	; 3
     be8:	82 07       	cpc	r24, r18
     bea:	91 05       	cpc	r25, r1
     bec:	70 f4       	brcc	.+28     	; 0xc0a <OsEE_atmega_startTimer1+0x74>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	42 e0       	ldi	r20, 0x02	; 2
     bf4:	b6 95       	lsr	r27
     bf6:	a7 95       	ror	r26
     bf8:	97 95       	ror	r25
     bfa:	87 95       	ror	r24
     bfc:	4a 95       	dec	r20
     bfe:	d1 f7       	brne	.-12     	; 0xbf4 <OsEE_atmega_startTimer1+0x5e>
     c00:	bc 01       	movw	r22, r24
     c02:	61 50       	subi	r22, 0x01	; 1
     c04:	71 09       	sbc	r23, r1
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	21 c0       	rjmp	.+66     	; 0xc4c <OsEE_atmega_startTimer1+0xb6>
     c0a:	61 15       	cp	r22, r1
     c0c:	71 05       	cpc	r23, r1
     c0e:	20 e1       	ldi	r18, 0x10	; 16
     c10:	82 07       	cpc	r24, r18
     c12:	91 05       	cpc	r25, r1
     c14:	70 f4       	brcc	.+28     	; 0xc32 <OsEE_atmega_startTimer1+0x9c>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	34 e0       	ldi	r19, 0x04	; 4
     c1c:	b6 95       	lsr	r27
     c1e:	a7 95       	ror	r26
     c20:	97 95       	ror	r25
     c22:	87 95       	ror	r24
     c24:	3a 95       	dec	r19
     c26:	d1 f7       	brne	.-12     	; 0xc1c <OsEE_atmega_startTimer1+0x86>
     c28:	bc 01       	movw	r22, r24
     c2a:	61 50       	subi	r22, 0x01	; 1
     c2c:	71 09       	sbc	r23, r1
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <OsEE_atmega_startTimer1+0xb6>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	26 e0       	ldi	r18, 0x06	; 6
     c38:	b6 95       	lsr	r27
     c3a:	a7 95       	ror	r26
     c3c:	97 95       	ror	r25
     c3e:	87 95       	ror	r24
     c40:	2a 95       	dec	r18
     c42:	d1 f7       	brne	.-12     	; 0xc38 <OsEE_atmega_startTimer1+0xa2>
     c44:	bc 01       	movw	r22, r24
     c46:	61 50       	subi	r22, 0x01	; 1
     c48:	71 09       	sbc	r23, r1
     c4a:	85 e0       	ldi	r24, 0x05	; 5
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	96 bb       	out	0x16, r25	; 22
     c50:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     c54:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c58:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c5c:	88 60       	ori	r24, 0x08	; 8
     c5e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     c62:	08 95       	ret

00000c64 <StartOS>:
     c64:	4f 92       	push	r4
     c66:	5f 92       	push	r5
     c68:	6f 92       	push	r6
     c6a:	7f 92       	push	r7
     c6c:	8f 92       	push	r8
     c6e:	9f 92       	push	r9
     c70:	af 92       	push	r10
     c72:	bf 92       	push	r11
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	00 d0       	rcall	.+0      	; 0xc86 <StartOS+0x22>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	00 91 e4 01 	lds	r16, 0x01E4	; 0x8001e4 <osEE_cdb_var>
     c8e:	10 91 e5 01 	lds	r17, 0x01E5	; 0x8001e5 <osEE_cdb_var+0x1>
     c92:	9f b7       	in	r25, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	d8 01       	movw	r26, r16
     c98:	18 96       	adiw	r26, 0x08	; 8
     c9a:	2d 91       	ld	r18, X+
     c9c:	3c 91       	ld	r19, X
     c9e:	19 97       	sbiw	r26, 0x09	; 9
     ca0:	23 2b       	or	r18, r19
     ca2:	09 f0       	breq	.+2      	; 0xca6 <StartOS+0x42>
     ca4:	6d c0       	rjmp	.+218    	; 0xd80 <StartOS+0x11c>
     ca6:	f8 2e       	mov	r15, r24
     ca8:	81 ee       	ldi	r24, 0xE1	; 225
     caa:	99 e0       	ldi	r25, 0x09	; 9
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	c0 90 e8 01 	lds	r12, 0x01E8	; 0x8001e8 <osEE_cdb_var+0x4>
     cb4:	d0 90 e9 01 	lds	r13, 0x01E9	; 0x8001e9 <osEE_cdb_var+0x5>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	19 96       	adiw	r26, 0x09	; 9
     cbe:	9c 93       	st	X, r25
     cc0:	8e 93       	st	-X, r24
     cc2:	18 97       	sbiw	r26, 0x08	; 8
     cc4:	1a 96       	adiw	r26, 0x0a	; 10
     cc6:	fc 92       	st	X, r15
     cc8:	0e 94 35 01 	call	0x26a	; 0x26a <StartupHook>
     ccc:	40 90 ea 01 	lds	r4, 0x01EA	; 0x8001ea <osEE_cdb_var+0x6>
     cd0:	50 90 eb 01 	lds	r5, 0x01EB	; 0x8001eb <osEE_cdb_var+0x7>
     cd4:	48 01       	movw	r8, r16
     cd6:	b2 e0       	ldi	r27, 0x02	; 2
     cd8:	8b 0e       	add	r8, r27
     cda:	91 1c       	adc	r9, r1
     cdc:	f2 01       	movw	r30, r4
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	f8 9e       	mul	r15, r24
     ce2:	e0 0d       	add	r30, r0
     ce4:	f1 1d       	adc	r31, r1
     ce6:	11 24       	eor	r1, r1
     ce8:	a2 80       	ldd	r10, Z+2	; 0x02
     cea:	b3 80       	ldd	r11, Z+3	; 0x03
     cec:	e1 2c       	mov	r14, r1
     cee:	f1 2c       	mov	r15, r1
     cf0:	2f 01       	movw	r4, r30
     cf2:	66 24       	eor	r6, r6
     cf4:	63 94       	inc	r6
     cf6:	71 2c       	mov	r7, r1
     cf8:	ea 14       	cp	r14, r10
     cfa:	fb 04       	cpc	r15, r11
     cfc:	31 f1       	breq	.+76     	; 0xd4a <StartOS+0xe6>
     cfe:	d2 01       	movw	r26, r4
     d00:	ed 91       	ld	r30, X+
     d02:	fc 91       	ld	r31, X
     d04:	c7 01       	movw	r24, r14
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	e8 0f       	add	r30, r24
     d0c:	f9 1f       	adc	r31, r25
     d0e:	40 81       	ld	r20, Z
     d10:	51 81       	ldd	r21, Z+1	; 0x01
     d12:	da 01       	movw	r26, r20
     d14:	14 96       	adiw	r26, 0x04	; 4
     d16:	ed 91       	ld	r30, X+
     d18:	fc 91       	ld	r31, X
     d1a:	15 97       	sbiw	r26, 0x05	; 5
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 5f       	subi	r24, 0xFF	; 255
     d20:	80 83       	st	Z, r24
     d22:	73 82       	std	Z+3, r7	; 0x03
     d24:	62 82       	std	Z+2, r6	; 0x02
     d26:	f8 01       	movw	r30, r16
     d28:	64 81       	ldd	r22, Z+4	; 0x04
     d2a:	75 81       	ldd	r23, Z+5	; 0x05
     d2c:	db 01       	movw	r26, r22
     d2e:	8d 91       	ld	r24, X+
     d30:	9c 91       	ld	r25, X
     d32:	11 97       	sbiw	r26, 0x01	; 1
     d34:	95 83       	std	Z+5, r25	; 0x05
     d36:	84 83       	std	Z+4, r24	; 0x04
     d38:	1d 92       	st	X+, r1
     d3a:	1c 92       	st	X, r1
     d3c:	c4 01       	movw	r24, r8
     d3e:	0e 94 fa 07 	call	0xff4	; 0xff4 <osEE_scheduler_rq_insert>
     d42:	bf ef       	ldi	r27, 0xFF	; 255
     d44:	eb 1a       	sub	r14, r27
     d46:	fb 0a       	sbc	r15, r27
     d48:	d7 cf       	rjmp	.-82     	; 0xcf8 <StartOS+0x94>
     d4a:	f8 01       	movw	r30, r16
     d4c:	80 85       	ldd	r24, Z+8	; 0x08
     d4e:	91 85       	ldd	r25, Z+9	; 0x09
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	21 f4       	brne	.+8      	; 0xd5c <StartOS+0xf8>
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	91 87       	std	Z+9, r25	; 0x09
     d5a:	80 87       	std	Z+8, r24	; 0x08
     d5c:	d8 01       	movw	r26, r16
     d5e:	18 96       	adiw	r26, 0x08	; 8
     d60:	8d 91       	ld	r24, X+
     d62:	9c 91       	ld	r25, X
     d64:	19 97       	sbiw	r26, 0x09	; 9
     d66:	02 97       	sbiw	r24, 0x02	; 2
     d68:	79 f4       	brne	.+30     	; 0xd88 <StartOS+0x124>
     d6a:	f6 01       	movw	r30, r12
     d6c:	62 81       	ldd	r22, Z+2	; 0x02
     d6e:	73 81       	ldd	r23, Z+3	; 0x03
     d70:	ab 01       	movw	r20, r22
     d72:	c6 01       	movw	r24, r12
     d74:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>
     d78:	c6 01       	movw	r24, r12
     d7a:	0e 94 3d 08 	call	0x107a	; 0x107a <osEE_task_end>
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <StartOS+0x124>
     d80:	9f bf       	out	0x3f, r25	; 63
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <StartOS+0x128>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	9f 90       	pop	r9
     da6:	8f 90       	pop	r8
     da8:	7f 90       	pop	r7
     daa:	6f 90       	pop	r6
     dac:	5f 90       	pop	r5
     dae:	4f 90       	pop	r4
     db0:	08 95       	ret

00000db2 <ActivateTask>:
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <osEE_kdb_var+0x4>
     dc2:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <osEE_kdb_var+0x5>
     dc6:	82 17       	cp	r24, r18
     dc8:	93 07       	cpc	r25, r19
     dca:	f0 f4       	brcc	.+60     	; 0xe08 <ActivateTask+0x56>
     dcc:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <osEE_kdb_var+0x2>
     dd0:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <osEE_kdb_var+0x3>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	e8 0f       	add	r30, r24
     dda:	f9 1f       	adc	r31, r25
     ddc:	00 81       	ld	r16, Z
     dde:	11 81       	ldd	r17, Z+1	; 0x01
     de0:	f8 01       	movw	r30, r16
     de2:	87 81       	ldd	r24, Z+7	; 0x07
     de4:	90 85       	ldd	r25, Z+8	; 0x08
     de6:	02 97       	sbiw	r24, 0x02	; 2
     de8:	78 f4       	brcc	.+30     	; 0xe08 <ActivateTask+0x56>
     dea:	ff b6       	in	r15, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	c8 01       	movw	r24, r16
     df0:	0e 94 2b 08 	call	0x1056	; 0x1056 <osEE_task_activated>
     df4:	ec 01       	movw	r28, r24
     df6:	89 2b       	or	r24, r25
     df8:	29 f4       	brne	.+10     	; 0xe04 <ActivateTask+0x52>
     dfa:	b8 01       	movw	r22, r16
     dfc:	8e ed       	ldi	r24, 0xDE	; 222
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <osEE_scheduler_task_activated>
     e04:	ff be       	out	0x3f, r15	; 63
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <ActivateTask+0x5a>
     e08:	c3 e0       	ldi	r28, 0x03	; 3
     e0a:	d0 e0       	ldi	r29, 0x00	; 0
     e0c:	ce 01       	movw	r24, r28
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	08 95       	ret

00000e1a <osEE_scheduler_task_wrapper_restore>:
     e1a:	dc 01       	movw	r26, r24
     e1c:	14 96       	adiw	r26, 0x04	; 4
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	15 97       	sbiw	r26, 0x05	; 5
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	93 83       	std	Z+3, r25	; 0x03
     e2a:	82 83       	std	Z+2, r24	; 0x02
     e2c:	08 95       	ret

00000e2e <osEE_scheduler_task_wrapper_run>:
     e2e:	ec 01       	movw	r28, r24
     e30:	ec 81       	ldd	r30, Y+4	; 0x04
     e32:	fd 81       	ldd	r31, Y+5	; 0x05
     e34:	81 81       	ldd	r24, Z+1	; 0x01
     e36:	24 e0       	ldi	r18, 0x04	; 4
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	33 83       	std	Z+3, r19	; 0x03
     e3c:	22 83       	std	Z+2, r18	; 0x02
     e3e:	8f 3f       	cpi	r24, 0xFF	; 255
     e40:	09 f0       	breq	.+2      	; 0xe44 <osEE_scheduler_task_wrapper_run+0x16>
     e42:	78 94       	sei
     e44:	e9 85       	ldd	r30, Y+9	; 0x09
     e46:	fa 85       	ldd	r31, Y+10	; 0x0a
     e48:	09 95       	icall
     e4a:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <osEE_cdb_var>
     e4e:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <osEE_cdb_var+0x1>
     e52:	10 8a       	std	Z+16, r1	; 0x10
     e54:	87 85       	ldd	r24, Z+15	; 0x0f
     e56:	88 23       	and	r24, r24
     e58:	19 f0       	breq	.+6      	; 0xe60 <osEE_scheduler_task_wrapper_run+0x32>
     e5a:	17 86       	std	Z+15, r1	; 0x0f
     e5c:	85 85       	ldd	r24, Z+13	; 0x0d
     e5e:	8f bf       	out	0x3f, r24	; 63
     e60:	81 89       	ldd	r24, Z+17	; 0x11
     e62:	88 23       	and	r24, r24
     e64:	11 f0       	breq	.+4      	; 0xe6a <osEE_scheduler_task_wrapper_run+0x3c>
     e66:	11 8a       	std	Z+17, r1	; 0x11
     e68:	78 94       	sei
     e6a:	8f b7       	in	r24, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	69 ec       	ldi	r22, 0xC9	; 201
     e70:	79 e0       	ldi	r23, 0x09	; 9
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00000e7a <osEE_idle_hook_wrapper>:
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	cf b7       	in	r28, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	8e ed       	ldi	r24, 0xDE	; 222
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 32 09 	call	0x1264	; 0x1264 <osEE_scheduler_task_preemption_point>
     e8e:	cf bf       	out	0x3f, r28	; 63
     e90:	00 91 e4 01 	lds	r16, 0x01E4	; 0x8001e4 <osEE_cdb_var>
     e94:	10 91 e5 01 	lds	r17, 0x01E5	; 0x8001e5 <osEE_cdb_var+0x1>
     e98:	c0 91 e6 01 	lds	r28, 0x01E6	; 0x8001e6 <osEE_cdb_var+0x2>
     e9c:	d0 91 e7 01 	lds	r29, 0x01E7	; 0x8001e7 <osEE_cdb_var+0x3>
     ea0:	f8 01       	movw	r30, r16
     ea2:	80 85       	ldd	r24, Z+8	; 0x08
     ea4:	91 85       	ldd	r25, Z+9	; 0x09
     ea6:	02 97       	sbiw	r24, 0x02	; 2
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <osEE_idle_hook_wrapper+0x3a>
     eaa:	20 97       	sbiw	r28, 0x00	; 0
     eac:	c9 f3       	breq	.-14     	; 0xea0 <osEE_idle_hook_wrapper+0x26>
     eae:	fe 01       	movw	r30, r28
     eb0:	09 95       	icall
     eb2:	f6 cf       	rjmp	.-20     	; 0xea0 <osEE_idle_hook_wrapper+0x26>
     eb4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <osEE_cdb_var+0x4>
     eb8:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <osEE_cdb_var+0x5>
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	0c 94 ae 09 	jmp	0x135c	; 0x135c <osEE_idle_task_terminate>

00000ec8 <osEE_scheduler_core_rq_preempt_stk>:
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	ec 01       	movw	r28, r24
     ed2:	a8 81       	ld	r26, Y
     ed4:	b9 81       	ldd	r27, Y+1	; 0x01
     ed6:	eb 01       	movw	r28, r22
     ed8:	e8 81       	ld	r30, Y
     eda:	f9 81       	ldd	r31, Y+1	; 0x01
     edc:	16 96       	adiw	r26, 0x06	; 6
     ede:	cd 91       	ld	r28, X+
     ee0:	dc 91       	ld	r29, X
     ee2:	17 97       	sbiw	r26, 0x07	; 7
     ee4:	20 97       	sbiw	r28, 0x00	; 0
     ee6:	b1 f0       	breq	.+44     	; 0xf14 <osEE_scheduler_core_rq_preempt_stk+0x4c>
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	9b 81       	ldd	r25, Y+3	; 0x03
     eec:	30 97       	sbiw	r30, 0x00	; 0
     eee:	e1 f1       	breq	.+120    	; 0xf68 <osEE_scheduler_core_rq_preempt_stk+0xa0>
     ef0:	ec 01       	movw	r28, r24
     ef2:	0c 81       	ldd	r16, Y+4	; 0x04
     ef4:	1d 81       	ldd	r17, Y+5	; 0x05
     ef6:	22 81       	ldd	r18, Z+2	; 0x02
     ef8:	33 81       	ldd	r19, Z+3	; 0x03
     efa:	e9 01       	movw	r28, r18
     efc:	4c 81       	ldd	r20, Y+4	; 0x04
     efe:	5d 81       	ldd	r21, Y+5	; 0x05
     f00:	e8 01       	movw	r28, r16
     f02:	39 81       	ldd	r19, Y+1	; 0x01
     f04:	ea 01       	movw	r28, r20
     f06:	29 81       	ldd	r18, Y+1	; 0x01
     f08:	32 17       	cp	r19, r18
     f0a:	70 f5       	brcc	.+92     	; 0xf68 <osEE_scheduler_core_rq_preempt_stk+0xa0>
     f0c:	22 e0       	ldi	r18, 0x02	; 2
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	e8 01       	movw	r28, r16
     f12:	0b c0       	rjmp	.+22     	; 0xf2a <osEE_scheduler_core_rq_preempt_stk+0x62>
     f14:	30 97       	sbiw	r30, 0x00	; 0
     f16:	41 f1       	breq	.+80     	; 0xf68 <osEE_scheduler_core_rq_preempt_stk+0xa0>
     f18:	ec 01       	movw	r28, r24
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	ec 01       	movw	r28, r24
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	22 e0       	ldi	r18, 0x02	; 2
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	ea 01       	movw	r28, r20
     f2a:	3b 83       	std	Y+3, r19	; 0x03
     f2c:	2a 83       	std	Y+2, r18	; 0x02
     f2e:	20 81       	ld	r18, Z
     f30:	31 81       	ldd	r19, Z+1	; 0x01
     f32:	eb 01       	movw	r28, r22
     f34:	39 83       	std	Y+1, r19	; 0x01
     f36:	28 83       	st	Y, r18
     f38:	c2 81       	ldd	r28, Z+2	; 0x02
     f3a:	d3 81       	ldd	r29, Z+3	; 0x03
     f3c:	4c 81       	ldd	r20, Y+4	; 0x04
     f3e:	5d 81       	ldd	r21, Y+5	; 0x05
     f40:	16 96       	adiw	r26, 0x06	; 6
     f42:	2d 91       	ld	r18, X+
     f44:	3c 91       	ld	r19, X
     f46:	17 97       	sbiw	r26, 0x07	; 7
     f48:	31 83       	std	Z+1, r19	; 0x01
     f4a:	20 83       	st	Z, r18
     f4c:	17 96       	adiw	r26, 0x07	; 7
     f4e:	fc 93       	st	X, r31
     f50:	ee 93       	st	-X, r30
     f52:	16 97       	sbiw	r26, 0x06	; 6
     f54:	cd 93       	st	X+, r28
     f56:	dc 93       	st	X, r29
     f58:	2c 85       	ldd	r18, Y+12	; 0x0c
     f5a:	fa 01       	movw	r30, r20
     f5c:	31 81       	ldd	r19, Z+1	; 0x01
     f5e:	32 17       	cp	r19, r18
     f60:	28 f4       	brcc	.+10     	; 0xf6c <osEE_scheduler_core_rq_preempt_stk+0xa4>
     f62:	fa 01       	movw	r30, r20
     f64:	21 83       	std	Z+1, r18	; 0x01
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <osEE_scheduler_core_rq_preempt_stk+0xa4>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <osEE_sn_priority_insert>:
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	db 01       	movw	r26, r22
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	13 97       	sbiw	r26, 0x03	; 3
     f88:	a4 81       	ldd	r26, Z+4	; 0x04
     f8a:	b5 81       	ldd	r27, Z+5	; 0x05
     f8c:	41 15       	cp	r20, r1
     f8e:	51 05       	cpc	r21, r1
     f90:	11 f0       	breq	.+4      	; 0xf96 <osEE_sn_priority_insert+0x20>
     f92:	23 85       	ldd	r18, Z+11	; 0x0b
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <osEE_sn_priority_insert+0x24>
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	2c 91       	ld	r18, X
     f9a:	ec 01       	movw	r28, r24
     f9c:	e8 81       	ld	r30, Y
     f9e:	f9 81       	ldd	r31, Y+1	; 0x01
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	91 f0       	breq	.+36     	; 0xfcc <osEE_sn_priority_insert+0x56>
     fa8:	c2 81       	ldd	r28, Z+2	; 0x02
     faa:	d3 81       	ldd	r29, Z+3	; 0x03
     fac:	0c 81       	ldd	r16, Y+4	; 0x04
     fae:	1d 81       	ldd	r17, Y+5	; 0x05
     fb0:	41 15       	cp	r20, r1
     fb2:	51 05       	cpc	r21, r1
     fb4:	11 f0       	breq	.+4      	; 0xfba <osEE_sn_priority_insert+0x44>
     fb6:	3b 85       	ldd	r19, Y+11	; 0x0b
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <osEE_sn_priority_insert+0x48>
     fba:	e8 01       	movw	r28, r16
     fbc:	39 81       	ldd	r19, Y+1	; 0x01
     fbe:	32 17       	cp	r19, r18
     fc0:	28 f0       	brcs	.+10     	; 0xfcc <osEE_sn_priority_insert+0x56>
     fc2:	df 01       	movw	r26, r30
     fc4:	01 90       	ld	r0, Z+
     fc6:	f0 81       	ld	r31, Z
     fc8:	e0 2d       	mov	r30, r0
     fca:	ec cf       	rjmp	.-40     	; 0xfa4 <osEE_sn_priority_insert+0x2e>
     fcc:	10 97       	sbiw	r26, 0x00	; 0
     fce:	29 f0       	breq	.+10     	; 0xfda <osEE_sn_priority_insert+0x64>
     fd0:	6d 93       	st	X+, r22
     fd2:	7c 93       	st	X, r23
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <osEE_sn_priority_insert+0x6e>
     fda:	dc 01       	movw	r26, r24
     fdc:	6d 93       	st	X+, r22
     fde:	7c 93       	st	X, r23
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	eb 01       	movw	r28, r22
     fe6:	f9 83       	std	Y+1, r31	; 0x01
     fe8:	e8 83       	st	Y, r30
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <osEE_scheduler_rq_insert>:
     ff4:	fb 01       	movw	r30, r22
     ff6:	53 83       	std	Z+3, r21	; 0x03
     ff8:	42 83       	std	Z+2, r20	; 0x02
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <osEE_sn_priority_insert>

00001002 <osEE_scheduler_core_pop_running>:
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	8c 01       	movw	r16, r24
    1010:	fc 01       	movw	r30, r24
    1012:	c0 81       	ld	r28, Z
    1014:	d1 81       	ldd	r29, Z+1	; 0x01
    1016:	ee 80       	ldd	r14, Y+6	; 0x06
    1018:	ff 80       	ldd	r15, Y+7	; 0x07
    101a:	f7 01       	movw	r30, r14
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	9f 83       	std	Y+7, r25	; 0x07
    1022:	8e 83       	std	Y+6, r24	; 0x06
    1024:	c8 01       	movw	r24, r16
    1026:	0e 94 64 07 	call	0xec8	; 0xec8 <osEE_scheduler_core_rq_preempt_stk>
    102a:	ee 81       	ldd	r30, Y+6	; 0x06
    102c:	ff 81       	ldd	r31, Y+7	; 0x07
    102e:	89 2b       	or	r24, r25
    1030:	51 f4       	brne	.+20     	; 0x1046 <osEE_scheduler_core_pop_running+0x44>
    1032:	30 97       	sbiw	r30, 0x00	; 0
    1034:	19 f0       	breq	.+6      	; 0x103c <osEE_scheduler_core_pop_running+0x3a>
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <osEE_scheduler_core_pop_running+0x40>
    103c:	f8 01       	movw	r30, r16
    103e:	84 81       	ldd	r24, Z+4	; 0x04
    1040:	95 81       	ldd	r25, Z+5	; 0x05
    1042:	99 83       	std	Y+1, r25	; 0x01
    1044:	88 83       	st	Y, r24
    1046:	c7 01       	movw	r24, r14
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	08 95       	ret

00001056 <osEE_task_activated>:
    1056:	dc 01       	movw	r26, r24
    1058:	14 96       	adiw	r26, 0x04	; 4
    105a:	ed 91       	ld	r30, X+
    105c:	fc 91       	ld	r31, X
    105e:	15 97       	sbiw	r26, 0x05	; 5
    1060:	90 81       	ld	r25, Z
    1062:	1d 96       	adiw	r26, 0x0d	; 13
    1064:	8c 91       	ld	r24, X
    1066:	98 17       	cp	r25, r24
    1068:	28 f4       	brcc	.+10     	; 0x1074 <osEE_task_activated+0x1e>
    106a:	9f 5f       	subi	r25, 0xFF	; 255
    106c:	90 83       	st	Z, r25
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	08 95       	ret
    1074:	84 e0       	ldi	r24, 0x04	; 4
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	08 95       	ret

0000107a <osEE_task_end>:
    107a:	dc 01       	movw	r26, r24
    107c:	14 96       	adiw	r26, 0x04	; 4
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	15 97       	sbiw	r26, 0x05	; 5
    1084:	1b 96       	adiw	r26, 0x0b	; 11
    1086:	8c 91       	ld	r24, X
    1088:	81 83       	std	Z+1, r24	; 0x01
    108a:	80 81       	ld	r24, Z
    108c:	81 50       	subi	r24, 0x01	; 1
    108e:	80 83       	st	Z, r24
    1090:	81 11       	cpse	r24, r1
    1092:	03 c0       	rjmp	.+6      	; 0x109a <osEE_task_end+0x20>
    1094:	13 82       	std	Z+3, r1	; 0x03
    1096:	12 82       	std	Z+2, r1	; 0x02
    1098:	08 95       	ret
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	93 83       	std	Z+3, r25	; 0x03
    10a0:	82 83       	std	Z+2, r24	; 0x02
    10a2:	08 95       	ret

000010a4 <osEE_activate_isr2>:
    10a4:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <osEE_kdb_var+0x2>
    10a8:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <osEE_kdb_var+0x3>
    10ac:	e2 2f       	mov	r30, r18
    10ae:	f9 2f       	mov	r31, r25
    10b0:	e8 0f       	add	r30, r24
    10b2:	f1 1d       	adc	r31, r1
    10b4:	e8 0f       	add	r30, r24
    10b6:	f1 1d       	adc	r31, r1
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	db 01       	movw	r26, r22
    10be:	14 96       	adiw	r26, 0x04	; 4
    10c0:	ed 91       	ld	r30, X+
    10c2:	fc 91       	ld	r31, X
    10c4:	15 97       	sbiw	r26, 0x05	; 5
    10c6:	80 81       	ld	r24, Z
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	80 83       	st	Z, r24
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	8e ed       	ldi	r24, 0xDE	; 222
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0c 94 4d 09 	jmp	0x129a	; 0x129a <osEE_scheduler_task_set_running>

000010d8 <osEE_scheduler_task_activated>:
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	db 01       	movw	r26, r22
    10de:	14 96       	adiw	r26, 0x04	; 4
    10e0:	cd 91       	ld	r28, X+
    10e2:	dc 91       	ld	r29, X
    10e4:	15 97       	sbiw	r26, 0x05	; 5
    10e6:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <osEE_cdb_var>
    10ea:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <osEE_cdb_var+0x1>
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	dc 01       	movw	r26, r24
    10f4:	14 96       	adiw	r26, 0x04	; 4
    10f6:	2d 91       	ld	r18, X+
    10f8:	3c 91       	ld	r19, X
    10fa:	15 97       	sbiw	r26, 0x05	; 5
    10fc:	d9 01       	movw	r26, r18
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	5c 91       	ld	r21, X
    1102:	49 81       	ldd	r20, Y+1	; 0x01
    1104:	a4 81       	ldd	r26, Z+4	; 0x04
    1106:	b5 81       	ldd	r27, Z+5	; 0x05
    1108:	54 17       	cp	r21, r20
    110a:	18 f5       	brcc	.+70     	; 0x1152 <osEE_scheduler_task_activated+0x7a>
    110c:	4d 91       	ld	r20, X+
    110e:	5c 91       	ld	r21, X
    1110:	11 97       	sbiw	r26, 0x01	; 1
    1112:	55 83       	std	Z+5, r21	; 0x05
    1114:	44 83       	std	Z+4, r20	; 0x04
    1116:	42 e0       	ldi	r20, 0x02	; 2
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	e9 01       	movw	r28, r18
    111c:	5b 83       	std	Y+3, r21	; 0x03
    111e:	4a 83       	std	Y+2, r20	; 0x02
    1120:	13 96       	adiw	r26, 0x03	; 3
    1122:	7c 93       	st	X, r23
    1124:	6e 93       	st	-X, r22
    1126:	12 97       	sbiw	r26, 0x02	; 2
    1128:	26 81       	ldd	r18, Z+6	; 0x06
    112a:	37 81       	ldd	r19, Z+7	; 0x07
    112c:	11 96       	adiw	r26, 0x01	; 1
    112e:	3c 93       	st	X, r19
    1130:	2e 93       	st	-X, r18
    1132:	b7 83       	std	Z+7, r27	; 0x07
    1134:	a6 83       	std	Z+6, r26	; 0x06
    1136:	71 83       	std	Z+1, r23	; 0x01
    1138:	60 83       	st	Z, r22
    113a:	db 01       	movw	r26, r22
    113c:	14 96       	adiw	r26, 0x04	; 4
    113e:	ed 91       	ld	r30, X+
    1140:	fc 91       	ld	r31, X
    1142:	15 97       	sbiw	r26, 0x05	; 5
    1144:	17 82       	std	Z+7, r1	; 0x07
    1146:	16 82       	std	Z+6, r1	; 0x06
    1148:	0e 94 85 09 	call	0x130a	; 0x130a <osEE_change_context_from_running>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	1a c0       	rjmp	.+52     	; 0x1186 <osEE_scheduler_task_activated+0xae>
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	89 2b       	or	r24, r25
    1158:	31 f4       	brne	.+12     	; 0x1166 <osEE_scheduler_task_activated+0x8e>
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9b 83       	std	Y+3, r25	; 0x03
    1160:	8a 83       	std	Y+2, r24	; 0x02
    1162:	1f 82       	std	Y+7, r1	; 0x07
    1164:	1e 82       	std	Y+6, r1	; 0x06
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	11 97       	sbiw	r26, 0x01	; 1
    116c:	95 83       	std	Z+5, r25	; 0x05
    116e:	84 83       	std	Z+4, r24	; 0x04
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	1c 92       	st	X, r1
    1174:	1e 92       	st	-X, r1
    1176:	ab 01       	movw	r20, r22
    1178:	bd 01       	movw	r22, r26
    117a:	cf 01       	movw	r24, r30
    117c:	02 96       	adiw	r24, 0x02	; 2
    117e:	0e 94 fa 07 	call	0xff4	; 0xff4 <osEE_scheduler_rq_insert>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <osEE_scheduler_task_terminated>:
    118c:	af 92       	push	r10
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <osEE_cdb_var>
    11a4:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <osEE_cdb_var+0x1>
    11a8:	fe 01       	movw	r30, r28
    11aa:	e1 90       	ld	r14, Z+
    11ac:	f1 90       	ld	r15, Z+
    11ae:	6f 01       	movw	r12, r30
    11b0:	f7 01       	movw	r30, r14
    11b2:	04 81       	ldd	r16, Z+4	; 0x04
    11b4:	15 81       	ldd	r17, Z+5	; 0x05
    11b6:	fb 01       	movw	r30, r22
    11b8:	f1 82       	std	Z+1, r15	; 0x01
    11ba:	e0 82       	st	Z, r14
    11bc:	f8 01       	movw	r30, r16
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	04 97       	sbiw	r24, 0x04	; 4
    11c4:	d9 f4       	brne	.+54     	; 0x11fc <osEE_scheduler_task_terminated+0x70>
    11c6:	b6 01       	movw	r22, r12
    11c8:	84 ee       	ldi	r24, 0xE4	; 228
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 01 08 	call	0x1002	; 0x1002 <osEE_scheduler_core_pop_running>
    11d0:	5c 01       	movw	r10, r24
    11d2:	c8 80       	ld	r12, Y
    11d4:	d9 80       	ldd	r13, Y+1	; 0x01
    11d6:	ec 14       	cp	r14, r12
    11d8:	fd 04       	cpc	r15, r13
    11da:	21 f0       	breq	.+8      	; 0x11e4 <osEE_scheduler_task_terminated+0x58>
    11dc:	c7 01       	movw	r24, r14
    11de:	0e 94 3d 08 	call	0x107a	; 0x107a <osEE_task_end>
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <osEE_scheduler_task_terminated+0x60>
    11e4:	f8 01       	movw	r30, r16
    11e6:	90 81       	ld	r25, Z
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	90 83       	st	Z, r25
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	f5 01       	movw	r30, r10
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	80 83       	st	Z, r24
    11f6:	bd 82       	std	Y+5, r11	; 0x05
    11f8:	ac 82       	std	Y+4, r10	; 0x04
    11fa:	28 c0       	rjmp	.+80     	; 0x124c <osEE_scheduler_task_terminated+0xc0>
    11fc:	6e 81       	ldd	r22, Y+6	; 0x06
    11fe:	7f 81       	ldd	r23, Y+7	; 0x07
    1200:	fb 01       	movw	r30, r22
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	9f 83       	std	Y+7, r25	; 0x07
    1208:	8e 83       	std	Y+6, r24	; 0x06
    120a:	f7 01       	movw	r30, r14
    120c:	83 85       	ldd	r24, Z+11	; 0x0b
    120e:	f8 01       	movw	r30, r16
    1210:	81 83       	std	Z+1, r24	; 0x01
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	93 83       	std	Z+3, r25	; 0x03
    1218:	82 83       	std	Z+2, r24	; 0x02
    121a:	80 81       	ld	r24, Z
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	11 f4       	brne	.+4      	; 0x1224 <osEE_scheduler_task_terminated+0x98>
    1220:	17 82       	std	Z+7, r1	; 0x07
    1222:	16 82       	std	Z+6, r1	; 0x06
    1224:	a7 01       	movw	r20, r14
    1226:	c6 01       	movw	r24, r12
    1228:	0e 94 fa 07 	call	0xff4	; 0xff4 <osEE_scheduler_rq_insert>
    122c:	b6 01       	movw	r22, r12
    122e:	84 ee       	ldi	r24, 0xE4	; 228
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 64 07 	call	0xec8	; 0xec8 <osEE_scheduler_core_rq_preempt_stk>
    1236:	89 2b       	or	r24, r25
    1238:	39 f4       	brne	.+14     	; 0x1248 <osEE_scheduler_task_terminated+0xbc>
    123a:	ee 81       	ldd	r30, Y+6	; 0x06
    123c:	ff 81       	ldd	r31, Y+7	; 0x07
    123e:	c2 80       	ldd	r12, Z+2	; 0x02
    1240:	d3 80       	ldd	r13, Z+3	; 0x03
    1242:	d9 82       	std	Y+1, r13	; 0x01
    1244:	c8 82       	st	Y, r12
    1246:	02 c0       	rjmp	.+4      	; 0x124c <osEE_scheduler_task_terminated+0xc0>
    1248:	c8 80       	ld	r12, Y
    124a:	d9 80       	ldd	r13, Y+1	; 0x01
    124c:	c6 01       	movw	r24, r12
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	08 95       	ret

00001264 <osEE_scheduler_task_preemption_point>:
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <osEE_cdb_var>
    126c:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <osEE_cdb_var+0x1>
    1270:	be 01       	movw	r22, r28
    1272:	6e 5f       	subi	r22, 0xFE	; 254
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	84 ee       	ldi	r24, 0xE4	; 228
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	0e 94 64 07 	call	0xec8	; 0xec8 <osEE_scheduler_core_rq_preempt_stk>
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	39 f0       	breq	.+14     	; 0x1290 <osEE_scheduler_task_preemption_point+0x2c>
    1282:	68 81       	ld	r22, Y
    1284:	79 81       	ldd	r23, Y+1	; 0x01
    1286:	0e 94 85 09 	call	0x130a	; 0x130a <osEE_change_context_from_running>
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <osEE_scheduler_task_preemption_point+0x30>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <osEE_scheduler_task_set_running>:
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <osEE_cdb_var>
    12a2:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <osEE_cdb_var+0x1>
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	26 81       	ldd	r18, Z+6	; 0x06
    12ac:	37 81       	ldd	r19, Z+7	; 0x07
    12ae:	ec 01       	movw	r28, r24
    12b0:	ac 81       	ldd	r26, Y+4	; 0x04
    12b2:	bd 81       	ldd	r27, Y+5	; 0x05
    12b4:	12 96       	adiw	r26, 0x02	; 2
    12b6:	cd 91       	ld	r28, X+
    12b8:	dc 91       	ld	r29, X
    12ba:	13 97       	sbiw	r26, 0x03	; 3
    12bc:	24 97       	sbiw	r28, 0x04	; 4
    12be:	31 f4       	brne	.+12     	; 0x12cc <osEE_scheduler_task_set_running+0x32>
    12c0:	c2 e0       	ldi	r28, 0x02	; 2
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
    12c4:	13 96       	adiw	r26, 0x03	; 3
    12c6:	dc 93       	st	X, r29
    12c8:	ce 93       	st	-X, r28
    12ca:	12 97       	sbiw	r26, 0x02	; 2
    12cc:	71 83       	std	Z+1, r23	; 0x01
    12ce:	60 83       	st	Z, r22
    12d0:	41 15       	cp	r20, r1
    12d2:	51 05       	cpc	r21, r1
    12d4:	69 f4       	brne	.+26     	; 0x12f0 <osEE_scheduler_task_set_running+0x56>
    12d6:	a4 81       	ldd	r26, Z+4	; 0x04
    12d8:	b5 81       	ldd	r27, Z+5	; 0x05
    12da:	4d 91       	ld	r20, X+
    12dc:	5c 91       	ld	r21, X
    12de:	11 97       	sbiw	r26, 0x01	; 1
    12e0:	55 83       	std	Z+5, r21	; 0x05
    12e2:	44 83       	std	Z+4, r20	; 0x04
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	1c 92       	st	X, r1
    12e8:	1e 92       	st	-X, r1
    12ea:	b7 83       	std	Z+7, r27	; 0x07
    12ec:	a6 83       	std	Z+6, r26	; 0x06
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <osEE_scheduler_task_set_running+0x5a>
    12f0:	57 83       	std	Z+7, r21	; 0x07
    12f2:	46 83       	std	Z+6, r20	; 0x06
    12f4:	06 80       	ldd	r0, Z+6	; 0x06
    12f6:	f7 81       	ldd	r31, Z+7	; 0x07
    12f8:	e0 2d       	mov	r30, r0
    12fa:	73 83       	std	Z+3, r23	; 0x03
    12fc:	62 83       	std	Z+2, r22	; 0x02
    12fe:	31 83       	std	Z+1, r19	; 0x01
    1300:	20 83       	st	Z, r18
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	0c 94 85 09 	jmp	0x130a	; 0x130a <osEE_change_context_from_running>

0000130a <osEE_change_context_from_running>:
    130a:	fb 01       	movw	r30, r22
    130c:	a4 81       	ldd	r26, Z+4	; 0x04
    130e:	b5 81       	ldd	r27, Z+5	; 0x05
    1310:	12 96       	adiw	r26, 0x02	; 2
    1312:	2d 91       	ld	r18, X+
    1314:	3c 91       	ld	r19, X
    1316:	13 97       	sbiw	r26, 0x03	; 3
    1318:	dc 01       	movw	r26, r24
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	4d 91       	ld	r20, X+
    131e:	5c 91       	ld	r21, X
    1320:	13 97       	sbiw	r26, 0x03	; 3
    1322:	62 81       	ldd	r22, Z+2	; 0x02
    1324:	73 81       	ldd	r23, Z+3	; 0x03
    1326:	cf 01       	movw	r24, r30
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	11 f4       	brne	.+4      	; 0x1332 <osEE_change_context_from_running+0x28>
    132e:	0c 94 88 00 	jmp	0x110	; 0x110 <osEE_hal_save_ctx_and_restore_ctx>
    1332:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>

00001336 <osEE_change_context_from_task_end>:
    1336:	cb 01       	movw	r24, r22
    1338:	db 01       	movw	r26, r22
    133a:	14 96       	adiw	r26, 0x04	; 4
    133c:	ed 91       	ld	r30, X+
    133e:	fc 91       	ld	r31, X
    1340:	15 97       	sbiw	r26, 0x05	; 5
    1342:	22 81       	ldd	r18, Z+2	; 0x02
    1344:	33 81       	ldd	r19, Z+3	; 0x03
    1346:	12 96       	adiw	r26, 0x02	; 2
    1348:	6d 91       	ld	r22, X+
    134a:	7c 91       	ld	r23, X
    134c:	13 97       	sbiw	r26, 0x03	; 3
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	11 f4       	brne	.+4      	; 0x1358 <osEE_change_context_from_task_end+0x22>
    1354:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
    1358:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

0000135c <osEE_idle_task_terminate>:
    135c:	dc 01       	movw	r26, r24
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	6d 91       	ld	r22, X+
    1362:	7c 91       	ld	r23, X
    1364:	13 97       	sbiw	r26, 0x03	; 3
    1366:	ed 91       	ld	r30, X+
    1368:	fc 91       	ld	r31, X
    136a:	40 81       	ld	r20, Z
    136c:	51 81       	ldd	r21, Z+1	; 0x01
    136e:	db 01       	movw	r26, r22
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	22 89       	ldd	r18, Z+18	; 0x12
    1376:	33 89       	ldd	r19, Z+19	; 0x13
    1378:	21 15       	cp	r18, r1
    137a:	31 05       	cpc	r19, r1
    137c:	29 f4       	brne	.+10     	; 0x1388 <osEE_idle_task_terminate+0x2c>
    137e:	db 01       	movw	r26, r22
    1380:	ed 93       	st	X+, r30
    1382:	fc 93       	st	X, r31
    1384:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
    1388:	24 17       	cp	r18, r20
    138a:	35 07       	cpc	r19, r21
    138c:	c1 f3       	breq	.-16     	; 0x137e <osEE_idle_task_terminate+0x22>
    138e:	f9 01       	movw	r30, r18
    1390:	f1 cf       	rjmp	.-30     	; 0x1374 <osEE_idle_task_terminate+0x18>

00001392 <osEE_scheduler_task_end>:
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	00 d0       	rcall	.+0      	; 0x1398 <osEE_scheduler_task_end+0x6>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	be 01       	movw	r22, r28
    139e:	6f 5f       	subi	r22, 0xFF	; 255
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8e ed       	ldi	r24, 0xDE	; 222
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 c6 08 	call	0x118c	; 0x118c <osEE_scheduler_task_terminated>
    13aa:	bc 01       	movw	r22, r24
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	0e 94 9b 09 	call	0x1336	; 0x1336 <osEE_change_context_from_task_end>
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <__vector_default>:
    13be:	f8 94       	cli
    13c0:	ff cf       	rjmp	.-2      	; 0x13c0 <__vector_default+0x2>

000013c2 <osEE_atmega_intvect>:
    13c2:	ee eb       	ldi	r30, 0xBE	; 190
    13c4:	08 95       	ret

000013c6 <__vector_11>:
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <osEE_avr8_isr2_stub>
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	18 95       	reti

000013d6 <osEE_avr8_isr2_stub>:
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	af 93       	push	r26
    13ee:	bf 93       	push	r27
    13f0:	ef 93       	push	r30
    13f2:	ff 93       	push	r31
    13f4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <osEE_activate_isr2>
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	08 95       	ret

00001416 <__subsf3>:
    1416:	50 58       	subi	r21, 0x80	; 128

00001418 <__addsf3>:
    1418:	bb 27       	eor	r27, r27
    141a:	aa 27       	eor	r26, r26
    141c:	0e 94 23 0a 	call	0x1446	; 0x1446 <__addsf3x>
    1420:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__fp_round>
    1424:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__fp_pscA>
    1428:	38 f0       	brcs	.+14     	; 0x1438 <__addsf3+0x20>
    142a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fp_pscB>
    142e:	20 f0       	brcs	.+8      	; 0x1438 <__addsf3+0x20>
    1430:	39 f4       	brne	.+14     	; 0x1440 <__addsf3+0x28>
    1432:	9f 3f       	cpi	r25, 0xFF	; 255
    1434:	19 f4       	brne	.+6      	; 0x143c <__addsf3+0x24>
    1436:	26 f4       	brtc	.+8      	; 0x1440 <__addsf3+0x28>
    1438:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__fp_nan>
    143c:	0e f4       	brtc	.+2      	; 0x1440 <__addsf3+0x28>
    143e:	e0 95       	com	r30
    1440:	e7 fb       	bst	r30, 7
    1442:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_inf>

00001446 <__addsf3x>:
    1446:	e9 2f       	mov	r30, r25
    1448:	0e 94 85 0b 	call	0x170a	; 0x170a <__fp_split3>
    144c:	58 f3       	brcs	.-42     	; 0x1424 <__addsf3+0xc>
    144e:	ba 17       	cp	r27, r26
    1450:	62 07       	cpc	r22, r18
    1452:	73 07       	cpc	r23, r19
    1454:	84 07       	cpc	r24, r20
    1456:	95 07       	cpc	r25, r21
    1458:	20 f0       	brcs	.+8      	; 0x1462 <__addsf3x+0x1c>
    145a:	79 f4       	brne	.+30     	; 0x147a <__addsf3x+0x34>
    145c:	a6 f5       	brtc	.+104    	; 0x14c6 <__addsf3x+0x80>
    145e:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__fp_zero>
    1462:	0e f4       	brtc	.+2      	; 0x1466 <__addsf3x+0x20>
    1464:	e0 95       	com	r30
    1466:	0b 2e       	mov	r0, r27
    1468:	ba 2f       	mov	r27, r26
    146a:	a0 2d       	mov	r26, r0
    146c:	0b 01       	movw	r0, r22
    146e:	b9 01       	movw	r22, r18
    1470:	90 01       	movw	r18, r0
    1472:	0c 01       	movw	r0, r24
    1474:	ca 01       	movw	r24, r20
    1476:	a0 01       	movw	r20, r0
    1478:	11 24       	eor	r1, r1
    147a:	ff 27       	eor	r31, r31
    147c:	59 1b       	sub	r21, r25
    147e:	99 f0       	breq	.+38     	; 0x14a6 <__addsf3x+0x60>
    1480:	59 3f       	cpi	r21, 0xF9	; 249
    1482:	50 f4       	brcc	.+20     	; 0x1498 <__addsf3x+0x52>
    1484:	50 3e       	cpi	r21, 0xE0	; 224
    1486:	68 f1       	brcs	.+90     	; 0x14e2 <__addsf3x+0x9c>
    1488:	1a 16       	cp	r1, r26
    148a:	f0 40       	sbci	r31, 0x00	; 0
    148c:	a2 2f       	mov	r26, r18
    148e:	23 2f       	mov	r18, r19
    1490:	34 2f       	mov	r19, r20
    1492:	44 27       	eor	r20, r20
    1494:	58 5f       	subi	r21, 0xF8	; 248
    1496:	f3 cf       	rjmp	.-26     	; 0x147e <__addsf3x+0x38>
    1498:	46 95       	lsr	r20
    149a:	37 95       	ror	r19
    149c:	27 95       	ror	r18
    149e:	a7 95       	ror	r26
    14a0:	f0 40       	sbci	r31, 0x00	; 0
    14a2:	53 95       	inc	r21
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <__addsf3x+0x52>
    14a6:	7e f4       	brtc	.+30     	; 0x14c6 <__addsf3x+0x80>
    14a8:	1f 16       	cp	r1, r31
    14aa:	ba 0b       	sbc	r27, r26
    14ac:	62 0b       	sbc	r22, r18
    14ae:	73 0b       	sbc	r23, r19
    14b0:	84 0b       	sbc	r24, r20
    14b2:	ba f0       	brmi	.+46     	; 0x14e2 <__addsf3x+0x9c>
    14b4:	91 50       	subi	r25, 0x01	; 1
    14b6:	a1 f0       	breq	.+40     	; 0x14e0 <__addsf3x+0x9a>
    14b8:	ff 0f       	add	r31, r31
    14ba:	bb 1f       	adc	r27, r27
    14bc:	66 1f       	adc	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	c2 f7       	brpl	.-16     	; 0x14b4 <__addsf3x+0x6e>
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <__addsf3x+0x9c>
    14c6:	ba 0f       	add	r27, r26
    14c8:	62 1f       	adc	r22, r18
    14ca:	73 1f       	adc	r23, r19
    14cc:	84 1f       	adc	r24, r20
    14ce:	48 f4       	brcc	.+18     	; 0x14e2 <__addsf3x+0x9c>
    14d0:	87 95       	ror	r24
    14d2:	77 95       	ror	r23
    14d4:	67 95       	ror	r22
    14d6:	b7 95       	ror	r27
    14d8:	f7 95       	ror	r31
    14da:	9e 3f       	cpi	r25, 0xFE	; 254
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <__addsf3x+0x9a>
    14de:	b0 cf       	rjmp	.-160    	; 0x1440 <__addsf3+0x28>
    14e0:	93 95       	inc	r25
    14e2:	88 0f       	add	r24, r24
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <__addsf3x+0xa2>
    14e6:	99 27       	eor	r25, r25
    14e8:	ee 0f       	add	r30, r30
    14ea:	97 95       	ror	r25
    14ec:	87 95       	ror	r24
    14ee:	08 95       	ret

000014f0 <__divsf3>:
    14f0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__divsf3x>
    14f4:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__fp_round>
    14f8:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fp_pscB>
    14fc:	58 f0       	brcs	.+22     	; 0x1514 <__divsf3+0x24>
    14fe:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__fp_pscA>
    1502:	40 f0       	brcs	.+16     	; 0x1514 <__divsf3+0x24>
    1504:	29 f4       	brne	.+10     	; 0x1510 <__divsf3+0x20>
    1506:	5f 3f       	cpi	r21, 0xFF	; 255
    1508:	29 f0       	breq	.+10     	; 0x1514 <__divsf3+0x24>
    150a:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_inf>
    150e:	51 11       	cpse	r21, r1
    1510:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_szero>
    1514:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__fp_nan>

00001518 <__divsf3x>:
    1518:	0e 94 85 0b 	call	0x170a	; 0x170a <__fp_split3>
    151c:	68 f3       	brcs	.-38     	; 0x14f8 <__divsf3+0x8>

0000151e <__divsf3_pse>:
    151e:	99 23       	and	r25, r25
    1520:	b1 f3       	breq	.-20     	; 0x150e <__divsf3+0x1e>
    1522:	55 23       	and	r21, r21
    1524:	91 f3       	breq	.-28     	; 0x150a <__divsf3+0x1a>
    1526:	95 1b       	sub	r25, r21
    1528:	55 0b       	sbc	r21, r21
    152a:	bb 27       	eor	r27, r27
    152c:	aa 27       	eor	r26, r26
    152e:	62 17       	cp	r22, r18
    1530:	73 07       	cpc	r23, r19
    1532:	84 07       	cpc	r24, r20
    1534:	38 f0       	brcs	.+14     	; 0x1544 <__divsf3_pse+0x26>
    1536:	9f 5f       	subi	r25, 0xFF	; 255
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	22 0f       	add	r18, r18
    153c:	33 1f       	adc	r19, r19
    153e:	44 1f       	adc	r20, r20
    1540:	aa 1f       	adc	r26, r26
    1542:	a9 f3       	breq	.-22     	; 0x152e <__divsf3_pse+0x10>
    1544:	35 d0       	rcall	.+106    	; 0x15b0 <__divsf3_pse+0x92>
    1546:	0e 2e       	mov	r0, r30
    1548:	3a f0       	brmi	.+14     	; 0x1558 <__divsf3_pse+0x3a>
    154a:	e0 e8       	ldi	r30, 0x80	; 128
    154c:	32 d0       	rcall	.+100    	; 0x15b2 <__divsf3_pse+0x94>
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	50 40       	sbci	r21, 0x00	; 0
    1552:	e6 95       	lsr	r30
    1554:	00 1c       	adc	r0, r0
    1556:	ca f7       	brpl	.-14     	; 0x154a <__divsf3_pse+0x2c>
    1558:	2b d0       	rcall	.+86     	; 0x15b0 <__divsf3_pse+0x92>
    155a:	fe 2f       	mov	r31, r30
    155c:	29 d0       	rcall	.+82     	; 0x15b0 <__divsf3_pse+0x92>
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	bb 1f       	adc	r27, r27
    1566:	26 17       	cp	r18, r22
    1568:	37 07       	cpc	r19, r23
    156a:	48 07       	cpc	r20, r24
    156c:	ab 07       	cpc	r26, r27
    156e:	b0 e8       	ldi	r27, 0x80	; 128
    1570:	09 f0       	breq	.+2      	; 0x1574 <__divsf3_pse+0x56>
    1572:	bb 0b       	sbc	r27, r27
    1574:	80 2d       	mov	r24, r0
    1576:	bf 01       	movw	r22, r30
    1578:	ff 27       	eor	r31, r31
    157a:	93 58       	subi	r25, 0x83	; 131
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	3a f0       	brmi	.+14     	; 0x158e <__divsf3_pse+0x70>
    1580:	9e 3f       	cpi	r25, 0xFE	; 254
    1582:	51 05       	cpc	r21, r1
    1584:	78 f0       	brcs	.+30     	; 0x15a4 <__divsf3_pse+0x86>
    1586:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_inf>
    158a:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_szero>
    158e:	5f 3f       	cpi	r21, 0xFF	; 255
    1590:	e4 f3       	brlt	.-8      	; 0x158a <__divsf3_pse+0x6c>
    1592:	98 3e       	cpi	r25, 0xE8	; 232
    1594:	d4 f3       	brlt	.-12     	; 0x158a <__divsf3_pse+0x6c>
    1596:	86 95       	lsr	r24
    1598:	77 95       	ror	r23
    159a:	67 95       	ror	r22
    159c:	b7 95       	ror	r27
    159e:	f7 95       	ror	r31
    15a0:	9f 5f       	subi	r25, 0xFF	; 255
    15a2:	c9 f7       	brne	.-14     	; 0x1596 <__divsf3_pse+0x78>
    15a4:	88 0f       	add	r24, r24
    15a6:	91 1d       	adc	r25, r1
    15a8:	96 95       	lsr	r25
    15aa:	87 95       	ror	r24
    15ac:	97 f9       	bld	r25, 7
    15ae:	08 95       	ret
    15b0:	e1 e0       	ldi	r30, 0x01	; 1
    15b2:	66 0f       	add	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	88 1f       	adc	r24, r24
    15b8:	bb 1f       	adc	r27, r27
    15ba:	62 17       	cp	r22, r18
    15bc:	73 07       	cpc	r23, r19
    15be:	84 07       	cpc	r24, r20
    15c0:	ba 07       	cpc	r27, r26
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <__divsf3_pse+0xae>
    15c4:	62 1b       	sub	r22, r18
    15c6:	73 0b       	sbc	r23, r19
    15c8:	84 0b       	sbc	r24, r20
    15ca:	ba 0b       	sbc	r27, r26
    15cc:	ee 1f       	adc	r30, r30
    15ce:	88 f7       	brcc	.-30     	; 0x15b2 <__divsf3_pse+0x94>
    15d0:	e0 95       	com	r30
    15d2:	08 95       	ret

000015d4 <__fixsfsi>:
    15d4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fixunssfsi>
    15d8:	68 94       	set
    15da:	b1 11       	cpse	r27, r1
    15dc:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_szero>
    15e0:	08 95       	ret

000015e2 <__fixunssfsi>:
    15e2:	0e 94 8d 0b 	call	0x171a	; 0x171a <__fp_splitA>
    15e6:	88 f0       	brcs	.+34     	; 0x160a <__fixunssfsi+0x28>
    15e8:	9f 57       	subi	r25, 0x7F	; 127
    15ea:	98 f0       	brcs	.+38     	; 0x1612 <__fixunssfsi+0x30>
    15ec:	b9 2f       	mov	r27, r25
    15ee:	99 27       	eor	r25, r25
    15f0:	b7 51       	subi	r27, 0x17	; 23
    15f2:	b0 f0       	brcs	.+44     	; 0x1620 <__fixunssfsi+0x3e>
    15f4:	e1 f0       	breq	.+56     	; 0x162e <__fixunssfsi+0x4c>
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	1a f0       	brmi	.+6      	; 0x1606 <__fixunssfsi+0x24>
    1600:	ba 95       	dec	r27
    1602:	c9 f7       	brne	.-14     	; 0x15f6 <__fixunssfsi+0x14>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <__fixunssfsi+0x4c>
    1606:	b1 30       	cpi	r27, 0x01	; 1
    1608:	91 f0       	breq	.+36     	; 0x162e <__fixunssfsi+0x4c>
    160a:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fp_zero>
    160e:	b1 e0       	ldi	r27, 0x01	; 1
    1610:	08 95       	ret
    1612:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__fp_zero>
    1616:	67 2f       	mov	r22, r23
    1618:	78 2f       	mov	r23, r24
    161a:	88 27       	eor	r24, r24
    161c:	b8 5f       	subi	r27, 0xF8	; 248
    161e:	39 f0       	breq	.+14     	; 0x162e <__fixunssfsi+0x4c>
    1620:	b9 3f       	cpi	r27, 0xF9	; 249
    1622:	cc f3       	brlt	.-14     	; 0x1616 <__fixunssfsi+0x34>
    1624:	86 95       	lsr	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b3 95       	inc	r27
    162c:	d9 f7       	brne	.-10     	; 0x1624 <__fixunssfsi+0x42>
    162e:	3e f4       	brtc	.+14     	; 0x163e <__fixunssfsi+0x5c>
    1630:	90 95       	com	r25
    1632:	80 95       	com	r24
    1634:	70 95       	com	r23
    1636:	61 95       	neg	r22
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	08 95       	ret

00001640 <__floatunsisf>:
    1640:	e8 94       	clt
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <__floatsisf+0x12>

00001644 <__floatsisf>:
    1644:	97 fb       	bst	r25, 7
    1646:	3e f4       	brtc	.+14     	; 0x1656 <__floatsisf+0x12>
    1648:	90 95       	com	r25
    164a:	80 95       	com	r24
    164c:	70 95       	com	r23
    164e:	61 95       	neg	r22
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	99 23       	and	r25, r25
    1658:	a9 f0       	breq	.+42     	; 0x1684 <__floatsisf+0x40>
    165a:	f9 2f       	mov	r31, r25
    165c:	96 e9       	ldi	r25, 0x96	; 150
    165e:	bb 27       	eor	r27, r27
    1660:	93 95       	inc	r25
    1662:	f6 95       	lsr	r31
    1664:	87 95       	ror	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b7 95       	ror	r27
    166c:	f1 11       	cpse	r31, r1
    166e:	f8 cf       	rjmp	.-16     	; 0x1660 <__floatsisf+0x1c>
    1670:	fa f4       	brpl	.+62     	; 0x16b0 <__floatsisf+0x6c>
    1672:	bb 0f       	add	r27, r27
    1674:	11 f4       	brne	.+4      	; 0x167a <__floatsisf+0x36>
    1676:	60 ff       	sbrs	r22, 0
    1678:	1b c0       	rjmp	.+54     	; 0x16b0 <__floatsisf+0x6c>
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	16 c0       	rjmp	.+44     	; 0x16b0 <__floatsisf+0x6c>
    1684:	88 23       	and	r24, r24
    1686:	11 f0       	breq	.+4      	; 0x168c <__floatsisf+0x48>
    1688:	96 e9       	ldi	r25, 0x96	; 150
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <__floatsisf+0x6a>
    168c:	77 23       	and	r23, r23
    168e:	21 f0       	breq	.+8      	; 0x1698 <__floatsisf+0x54>
    1690:	9e e8       	ldi	r25, 0x8E	; 142
    1692:	87 2f       	mov	r24, r23
    1694:	76 2f       	mov	r23, r22
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <__floatsisf+0x5e>
    1698:	66 23       	and	r22, r22
    169a:	71 f0       	breq	.+28     	; 0x16b8 <__floatsisf+0x74>
    169c:	96 e8       	ldi	r25, 0x86	; 134
    169e:	86 2f       	mov	r24, r22
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	2a f0       	brmi	.+10     	; 0x16b0 <__floatsisf+0x6c>
    16a6:	9a 95       	dec	r25
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	da f7       	brpl	.-10     	; 0x16a6 <__floatsisf+0x62>
    16b0:	88 0f       	add	r24, r24
    16b2:	96 95       	lsr	r25
    16b4:	87 95       	ror	r24
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret

000016ba <__fp_inf>:
    16ba:	97 f9       	bld	r25, 7
    16bc:	9f 67       	ori	r25, 0x7F	; 127
    16be:	80 e8       	ldi	r24, 0x80	; 128
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	08 95       	ret

000016c6 <__fp_nan>:
    16c6:	9f ef       	ldi	r25, 0xFF	; 255
    16c8:	80 ec       	ldi	r24, 0xC0	; 192
    16ca:	08 95       	ret

000016cc <__fp_pscA>:
    16cc:	00 24       	eor	r0, r0
    16ce:	0a 94       	dec	r0
    16d0:	16 16       	cp	r1, r22
    16d2:	17 06       	cpc	r1, r23
    16d4:	18 06       	cpc	r1, r24
    16d6:	09 06       	cpc	r0, r25
    16d8:	08 95       	ret

000016da <__fp_pscB>:
    16da:	00 24       	eor	r0, r0
    16dc:	0a 94       	dec	r0
    16de:	12 16       	cp	r1, r18
    16e0:	13 06       	cpc	r1, r19
    16e2:	14 06       	cpc	r1, r20
    16e4:	05 06       	cpc	r0, r21
    16e6:	08 95       	ret

000016e8 <__fp_round>:
    16e8:	09 2e       	mov	r0, r25
    16ea:	03 94       	inc	r0
    16ec:	00 0c       	add	r0, r0
    16ee:	11 f4       	brne	.+4      	; 0x16f4 <__fp_round+0xc>
    16f0:	88 23       	and	r24, r24
    16f2:	52 f0       	brmi	.+20     	; 0x1708 <__fp_round+0x20>
    16f4:	bb 0f       	add	r27, r27
    16f6:	40 f4       	brcc	.+16     	; 0x1708 <__fp_round+0x20>
    16f8:	bf 2b       	or	r27, r31
    16fa:	11 f4       	brne	.+4      	; 0x1700 <__fp_round+0x18>
    16fc:	60 ff       	sbrs	r22, 0
    16fe:	04 c0       	rjmp	.+8      	; 0x1708 <__fp_round+0x20>
    1700:	6f 5f       	subi	r22, 0xFF	; 255
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	08 95       	ret

0000170a <__fp_split3>:
    170a:	57 fd       	sbrc	r21, 7
    170c:	90 58       	subi	r25, 0x80	; 128
    170e:	44 0f       	add	r20, r20
    1710:	55 1f       	adc	r21, r21
    1712:	59 f0       	breq	.+22     	; 0x172a <__fp_splitA+0x10>
    1714:	5f 3f       	cpi	r21, 0xFF	; 255
    1716:	71 f0       	breq	.+28     	; 0x1734 <__fp_splitA+0x1a>
    1718:	47 95       	ror	r20

0000171a <__fp_splitA>:
    171a:	88 0f       	add	r24, r24
    171c:	97 fb       	bst	r25, 7
    171e:	99 1f       	adc	r25, r25
    1720:	61 f0       	breq	.+24     	; 0x173a <__fp_splitA+0x20>
    1722:	9f 3f       	cpi	r25, 0xFF	; 255
    1724:	79 f0       	breq	.+30     	; 0x1744 <__fp_splitA+0x2a>
    1726:	87 95       	ror	r24
    1728:	08 95       	ret
    172a:	12 16       	cp	r1, r18
    172c:	13 06       	cpc	r1, r19
    172e:	14 06       	cpc	r1, r20
    1730:	55 1f       	adc	r21, r21
    1732:	f2 cf       	rjmp	.-28     	; 0x1718 <__fp_split3+0xe>
    1734:	46 95       	lsr	r20
    1736:	f1 df       	rcall	.-30     	; 0x171a <__fp_splitA>
    1738:	08 c0       	rjmp	.+16     	; 0x174a <__fp_splitA+0x30>
    173a:	16 16       	cp	r1, r22
    173c:	17 06       	cpc	r1, r23
    173e:	18 06       	cpc	r1, r24
    1740:	99 1f       	adc	r25, r25
    1742:	f1 cf       	rjmp	.-30     	; 0x1726 <__fp_splitA+0xc>
    1744:	86 95       	lsr	r24
    1746:	71 05       	cpc	r23, r1
    1748:	61 05       	cpc	r22, r1
    174a:	08 94       	sec
    174c:	08 95       	ret

0000174e <__fp_zero>:
    174e:	e8 94       	clt

00001750 <__fp_szero>:
    1750:	bb 27       	eor	r27, r27
    1752:	66 27       	eor	r22, r22
    1754:	77 27       	eor	r23, r23
    1756:	cb 01       	movw	r24, r22
    1758:	97 f9       	bld	r25, 7
    175a:	08 95       	ret

0000175c <__mulsf3>:
    175c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__mulsf3x>
    1760:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__fp_round>
    1764:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__fp_pscA>
    1768:	38 f0       	brcs	.+14     	; 0x1778 <__mulsf3+0x1c>
    176a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__fp_pscB>
    176e:	20 f0       	brcs	.+8      	; 0x1778 <__mulsf3+0x1c>
    1770:	95 23       	and	r25, r21
    1772:	11 f0       	breq	.+4      	; 0x1778 <__mulsf3+0x1c>
    1774:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_inf>
    1778:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__fp_nan>
    177c:	11 24       	eor	r1, r1
    177e:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_szero>

00001782 <__mulsf3x>:
    1782:	0e 94 85 0b 	call	0x170a	; 0x170a <__fp_split3>
    1786:	70 f3       	brcs	.-36     	; 0x1764 <__mulsf3+0x8>

00001788 <__mulsf3_pse>:
    1788:	95 9f       	mul	r25, r21
    178a:	c1 f3       	breq	.-16     	; 0x177c <__mulsf3+0x20>
    178c:	95 0f       	add	r25, r21
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	55 1f       	adc	r21, r21
    1792:	62 9f       	mul	r22, r18
    1794:	f0 01       	movw	r30, r0
    1796:	72 9f       	mul	r23, r18
    1798:	bb 27       	eor	r27, r27
    179a:	f0 0d       	add	r31, r0
    179c:	b1 1d       	adc	r27, r1
    179e:	63 9f       	mul	r22, r19
    17a0:	aa 27       	eor	r26, r26
    17a2:	f0 0d       	add	r31, r0
    17a4:	b1 1d       	adc	r27, r1
    17a6:	aa 1f       	adc	r26, r26
    17a8:	64 9f       	mul	r22, r20
    17aa:	66 27       	eor	r22, r22
    17ac:	b0 0d       	add	r27, r0
    17ae:	a1 1d       	adc	r26, r1
    17b0:	66 1f       	adc	r22, r22
    17b2:	82 9f       	mul	r24, r18
    17b4:	22 27       	eor	r18, r18
    17b6:	b0 0d       	add	r27, r0
    17b8:	a1 1d       	adc	r26, r1
    17ba:	62 1f       	adc	r22, r18
    17bc:	73 9f       	mul	r23, r19
    17be:	b0 0d       	add	r27, r0
    17c0:	a1 1d       	adc	r26, r1
    17c2:	62 1f       	adc	r22, r18
    17c4:	83 9f       	mul	r24, r19
    17c6:	a0 0d       	add	r26, r0
    17c8:	61 1d       	adc	r22, r1
    17ca:	22 1f       	adc	r18, r18
    17cc:	74 9f       	mul	r23, r20
    17ce:	33 27       	eor	r19, r19
    17d0:	a0 0d       	add	r26, r0
    17d2:	61 1d       	adc	r22, r1
    17d4:	23 1f       	adc	r18, r19
    17d6:	84 9f       	mul	r24, r20
    17d8:	60 0d       	add	r22, r0
    17da:	21 1d       	adc	r18, r1
    17dc:	82 2f       	mov	r24, r18
    17de:	76 2f       	mov	r23, r22
    17e0:	6a 2f       	mov	r22, r26
    17e2:	11 24       	eor	r1, r1
    17e4:	9f 57       	subi	r25, 0x7F	; 127
    17e6:	50 40       	sbci	r21, 0x00	; 0
    17e8:	9a f0       	brmi	.+38     	; 0x1810 <__mulsf3_pse+0x88>
    17ea:	f1 f0       	breq	.+60     	; 0x1828 <__mulsf3_pse+0xa0>
    17ec:	88 23       	and	r24, r24
    17ee:	4a f0       	brmi	.+18     	; 0x1802 <__mulsf3_pse+0x7a>
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	bb 1f       	adc	r27, r27
    17f6:	66 1f       	adc	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	91 50       	subi	r25, 0x01	; 1
    17fe:	50 40       	sbci	r21, 0x00	; 0
    1800:	a9 f7       	brne	.-22     	; 0x17ec <__mulsf3_pse+0x64>
    1802:	9e 3f       	cpi	r25, 0xFE	; 254
    1804:	51 05       	cpc	r21, r1
    1806:	80 f0       	brcs	.+32     	; 0x1828 <__mulsf3_pse+0xa0>
    1808:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_inf>
    180c:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_szero>
    1810:	5f 3f       	cpi	r21, 0xFF	; 255
    1812:	e4 f3       	brlt	.-8      	; 0x180c <__mulsf3_pse+0x84>
    1814:	98 3e       	cpi	r25, 0xE8	; 232
    1816:	d4 f3       	brlt	.-12     	; 0x180c <__mulsf3_pse+0x84>
    1818:	86 95       	lsr	r24
    181a:	77 95       	ror	r23
    181c:	67 95       	ror	r22
    181e:	b7 95       	ror	r27
    1820:	f7 95       	ror	r31
    1822:	e7 95       	ror	r30
    1824:	9f 5f       	subi	r25, 0xFF	; 255
    1826:	c1 f7       	brne	.-16     	; 0x1818 <__mulsf3_pse+0x90>
    1828:	fe 2b       	or	r31, r30
    182a:	88 0f       	add	r24, r24
    182c:	91 1d       	adc	r25, r1
    182e:	96 95       	lsr	r25
    1830:	87 95       	ror	r24
    1832:	97 f9       	bld	r25, 7
    1834:	08 95       	ret

00001836 <__divmodhi4>:
    1836:	97 fb       	bst	r25, 7
    1838:	07 2e       	mov	r0, r23
    183a:	16 f4       	brtc	.+4      	; 0x1840 <__divmodhi4+0xa>
    183c:	00 94       	com	r0
    183e:	07 d0       	rcall	.+14     	; 0x184e <__divmodhi4_neg1>
    1840:	77 fd       	sbrc	r23, 7
    1842:	09 d0       	rcall	.+18     	; 0x1856 <__divmodhi4_neg2>
    1844:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__udivmodhi4>
    1848:	07 fc       	sbrc	r0, 7
    184a:	05 d0       	rcall	.+10     	; 0x1856 <__divmodhi4_neg2>
    184c:	3e f4       	brtc	.+14     	; 0x185c <__divmodhi4_exit>

0000184e <__divmodhi4_neg1>:
    184e:	90 95       	com	r25
    1850:	81 95       	neg	r24
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	08 95       	ret

00001856 <__divmodhi4_neg2>:
    1856:	70 95       	com	r23
    1858:	61 95       	neg	r22
    185a:	7f 4f       	sbci	r23, 0xFF	; 255

0000185c <__divmodhi4_exit>:
    185c:	08 95       	ret

0000185e <__udivmodsi4>:
    185e:	a1 e2       	ldi	r26, 0x21	; 33
    1860:	1a 2e       	mov	r1, r26
    1862:	aa 1b       	sub	r26, r26
    1864:	bb 1b       	sub	r27, r27
    1866:	fd 01       	movw	r30, r26
    1868:	0d c0       	rjmp	.+26     	; 0x1884 <__udivmodsi4_ep>

0000186a <__udivmodsi4_loop>:
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	ee 1f       	adc	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	a2 17       	cp	r26, r18
    1874:	b3 07       	cpc	r27, r19
    1876:	e4 07       	cpc	r30, r20
    1878:	f5 07       	cpc	r31, r21
    187a:	20 f0       	brcs	.+8      	; 0x1884 <__udivmodsi4_ep>
    187c:	a2 1b       	sub	r26, r18
    187e:	b3 0b       	sbc	r27, r19
    1880:	e4 0b       	sbc	r30, r20
    1882:	f5 0b       	sbc	r31, r21

00001884 <__udivmodsi4_ep>:
    1884:	66 1f       	adc	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	88 1f       	adc	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	1a 94       	dec	r1
    188e:	69 f7       	brne	.-38     	; 0x186a <__udivmodsi4_loop>
    1890:	60 95       	com	r22
    1892:	70 95       	com	r23
    1894:	80 95       	com	r24
    1896:	90 95       	com	r25
    1898:	9b 01       	movw	r18, r22
    189a:	ac 01       	movw	r20, r24
    189c:	bd 01       	movw	r22, r26
    189e:	cf 01       	movw	r24, r30
    18a0:	08 95       	ret

000018a2 <__udivmodhi4>:
    18a2:	aa 1b       	sub	r26, r26
    18a4:	bb 1b       	sub	r27, r27
    18a6:	51 e1       	ldi	r21, 0x11	; 17
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <__udivmodhi4_ep>

000018aa <__udivmodhi4_loop>:
    18aa:	aa 1f       	adc	r26, r26
    18ac:	bb 1f       	adc	r27, r27
    18ae:	a6 17       	cp	r26, r22
    18b0:	b7 07       	cpc	r27, r23
    18b2:	10 f0       	brcs	.+4      	; 0x18b8 <__udivmodhi4_ep>
    18b4:	a6 1b       	sub	r26, r22
    18b6:	b7 0b       	sbc	r27, r23

000018b8 <__udivmodhi4_ep>:
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	5a 95       	dec	r21
    18be:	a9 f7       	brne	.-22     	; 0x18aa <__udivmodhi4_loop>
    18c0:	80 95       	com	r24
    18c2:	90 95       	com	r25
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	08 95       	ret

000018ca <__tablejump2__>:
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	05 90       	lpm	r0, Z+
    18d0:	f4 91       	lpm	r31, Z
    18d2:	e0 2d       	mov	r30, r0
    18d4:	09 94       	ijmp

000018d6 <_exit>:
    18d6:	f8 94       	cli

000018d8 <__stop_program>:
    18d8:	ff cf       	rjmp	.-2      	; 0x18d8 <__stop_program>
